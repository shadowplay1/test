{"meta":{"generator":"0.11.1","format":20,"date":1666677455808},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"# Discord Economy Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\n\n## üôã‚Äç‚ôÇÔ∏è | Welcome!\nWelcome to the `discord-economy-super v1.6.9` documentation!\n\n## üìÇ | Installation\n<b>Note:<b>\n</br>\n<b>Node.js 14.0.0 or newer is required. Otherwise, the module won't work.</b><br>\n```console\n$ npm i discord-economy-super\n$ yarn add discord-economy-super\n$ pnpm add discord-economy-super\n```\n\n## ‚ùì | What is Discord Economy Super?\n<b>Discord Economy Super is a powerful Node.js module that allows you to make an economy system in your bot very easily. Supports both MongoDB and JSON databases!</b>\n\nFeatures:\n<br>\n<ul>\n<li><b>Clean TypeScript Defenitions üìò</b></li>\n<li><b><a href=\"https://des-docs.js.org/#/docs/main/1.6.9/general/migrating-to-mongo\">MongoDB Support üçÉ</a></b></li>\n<li><b>Object-oriented üìú</b></li>\n<li><b>Flexible and Customizable ‚öôÔ∏è</b></li>\n<li><b>Easy to use üëç</b></li>\n<li><b>Beginner Friendly üòÑ</b></li>\n<li><b>Shop System üõí</b></li>\n<li><b>Bank Balance System üè¶</b></li>\n<li><b>Multi-Server Setup üîß</b></li>\n</ul>\n\n## ü§î | Help\n<b>If you don't understand something in the documentation or you are experiencing problems, feel free to join our <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\n<br>\n<b>\n\nLooking for a documentation for **MongoDB** version? Scroll down to the end in a version selection dropdown list on a sidebar!\n\n</b>\n\n## üïò | My Other Modules\n<ul>\n<li><b><a href = \"https://www.npmjs.com/package/discord-leveling-super\">discord-leveling-super</a></b></li>\n<li><b><a href = \"https://www.npmjs.com/package/quick-mongo-super\">quick-mongo-super</a></b></li>\n</ul>\n\n## ‚ùó | Useful Links\n<ul>\n<li><b><a href = \"https://www.npmjs.com/package/discord-economy-super\">NPM</a></b></li>\n<li><b><a href = \"https://des-docs.js.org/#/docs/main/1.5.2general/faq\">Frequently Asked Questions</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super\">GitHub</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super/tree/main/examples\">Examples</a></b></li>\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\n</ul>\n<br>\n<b>If you don't understand something in the documentation or you are experiencing problems, feel free to join our <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# ‚ù§Ô∏è Thanks for using Discord Economy Super ‚ù§Ô∏è\n","path":"docs/general/welcome.md"},"faq":{"name":"FAQ","type":"md","content":"# Discord Economy Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\n\n## ‚ùì | Frequently Asked Questions\n\n### **Q:** How can I use MongoDB in Economy?\n\n#### **A:** Of course! Just follow the [migration guide](https://des-docs.js.org/#/docs/main/1.6.9/general/migrating-to-mongo) to start using Economy with MongoDB.\n\n<br>\n\n### **Q:** Why do I get a \"Cannot read property '(any manager property or method)' of null\"?\n\n#### **A:** Because the module is not started and not ready yet. Assign the economy property to your bot client or reassign the economy variable in \"ready\" event to fix this problem:\n\n```js\nconst Economy = require('discord-economy-super')\nlet economy = new Economy(options)\n\neconomy.on('ready', eco => {\n    <client>.eco = eco\n\t// or\n\teconomy = eco\n})\n\n\n// both ways will work fine:\n\nconst economyUsers = eco.users.all()\nconst economyUsers1 = bot.eco.users.all()\n```\n\n<br>\n\n### **Q:** Why do I get a \"SyntaxError: Unexpected token '.' \"?\n\n#### **A:** Because the module is supporting only Node.js v14.0.0 or above. Earlier versions are not supporting the \"?.\" operator. You need to update Node.js to make the module work.\n\n<br>\n\n### **Q:** Why is the code from examples not working?\n\n#### **A:** Examples provided in documentation and in GitHub are for one-file bot. For multiple-files bot it might need to be changed. See the questions above to get more info. If it's a bug, see the question below.\n\n### **Q:** I found a bug or have an idea. Where I could submit it?\n\n#### **A:** In our [Support Server](https://discord.gg/4pWKq8vUnb). We appreciate that!\n\n<br>\n\n### **Q:** Can I use the module globally?\n\n#### **A:** Yes! Just use a static value (such as 'global', '123', etc.) as guildID in all methods, and the module will work like with only one guild. \n#### For example, we have this database: \n\n```js\n{\n    \"global\": {\n\t    \"123\": {\n\t\t    \"money\": 1150,\n\t\t    \"dailyCooldown\": 1638034751398,\n\t\t    \"weeklyCooldown\": 1636811771994,\n\t\t    \"workCooldown\": 1636817161065,\n\t\t    \"inventory\": [],\n\t\t    \"history\": []\n\t    }\n    },\n\t\"other_guild_id\": {\n\t\t\"123\": {\n\t\t\t\"money\": 2000,\n\t\t\t\"dailyCooldown\": 1638034751398,\n\t\t\t\"weeklyCooldown\": 1636811771994,\n\t\t\t\"workCooldown\": 1636817161065,\n\t\t\t\"inventory\": [],\n\t\t\t\"history\": []\n\t\t}\n\t}\n}\n```\n\nAnd here's the example code with that database:\n```js\nconst STATIC_GUILD_ID = 'global'\nconst OTHER_GUILD_ID = 'other_guild_id'\n\nconst guild = eco.guilds.get(STATIC_GUILD_ID)\nconst guild1 = eco.guilds.get(OTHER_GUILD_ID)\n\nconst user = guild.users.get('123')\nconst user1 = guild1.users.get('123')\n\nconst balance = user.balance.get() // 1150\nconst balance1 = user1.balance.get() // 2000\n```\nIn this code, `global` and `other_guild_id` are different values. It means, that the module will search for the data in different guilds. Using the same value will search for the data in the same guild. So, the data from every Discord guild will be stored in the same Economy guild and the data will be accessible on every Discord guild.\n\nSee [this page](https://des-docs.js.org/#/docs/main/1.6.9/general/global) for additional info about using the module globally.\n\n<br>\n\n### **Q:** Can I send a random messages on using the item?\n\n#### **A:** Yes! Here's the example of it:\n\nRandom string syntax: `[random=\"item1\", \"item2\", \"etc...\"]`\nExample usage:\n\n```js\nconst guild = eco.guilds.get('guildID')\nconst user = eco.users.get('userID')\n\nguild.shop.addItem({\n  name: 'good day',\n  price: 100,\n  message: 'What a [random=\"wonderful\", \"great\", \"sunny\"] day!',\n});\n\nuser.items.buy(1, \"memberID\", \"guildID\")\n\neco.inventory.useItem(1, \"memberID\", \"guildID\"); // What a wonderful day!\neco.inventory.useItem(1, \"memberID\", \"guildID\"); // What a great day!\neco.inventory.useItem(1, \"memberID\", \"guildID\"); // What a sunny day!\n\n// In a returning string, [random=\"wonderful\", \"great\", \"sunny\"]\n// will be replaced with the any of\n// the words \"wonderful\", \"great\" or \"sunny\".\n```\n\n<br>\n\n## ‚ùó | Useful Links\n\n<ul>\n<li><b><a href = \"https://www.npmjs.com/package/discord-economy-super\">NPM</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super\">GitHub</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super/tree/main/examples\">Bot Examples</a></b></li>\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\n</ul>\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# ‚ù§Ô∏è Thanks for using Discord Economy Super ‚ù§Ô∏è\n","path":"docs/general/faq.md"},"migrating-to-mongo":{"name":"Migrating to MongoDB","type":"md","content":"# Discord Economy Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\n\n# MongoDB Migration Guide\n\n## Introduction\n\nBefore we start, I'd like to say about the most important changes in MongoDB version of economy.<br>\nFirstly, you have to use (async/await)s to get methods' values as it had to be moved to Promises usage.<br>\nFor example, this code:\n\n```js\nconst guild = eco.guilds.get(\"123\");\nconst user = guild.users.get(\"321\");\n\nconsole.log(guild);\nconsole.log(user);\n```\n\nshould be changed to this:\n\n```js\n// in async function\n\nconst guild = await eco.guilds.get(\"123\");\nconst user = await guild.users.get(\"321\");\n\nconsole.log(guild);\nconsole.log(user);\n```\n\nor this:\n\n```js\neco.guilds.get(\"123\").then((guild) => {\n  guild.users.get(\"321\").then((user) => {\n    console.log(guild);\n    console.log(user);\n  });\n});\n```\n\n## First Steps\n\nTo use the Mongo version of Economy, we need to require it:\n\n```js\nconst Economy = require(\"discord-economy-super/mongodb\");\n// or:\nimport Economy from \"discord-economy-super/mongodb\";\n```\n\n## Configuring the Connection\n\nNow we need to configure the connection to MongoDB. In this version, having a configuration object is required as we need to provide the connection data to our cluster.\n\nPlease note that `storagePath`, `checkStorage` and `updateCountdown` options were removed as they don't belong to MongoDB.\n\n```js\nconst eco = new Economy({\n    connection: {\n        connectionURI: '...', // mongodb connection uri\n        collectionName: 'collection', // optional\n        dbName: 'db' // optional\n        mongoClientOptions: { ... } // optional\n    }\n})\n```\n\n## Important Things\n\n- `FetchManager`, `DotParser` and everything JSON-related was deleted.\n- All the code in MongoDB version is 100% Promise based.\n- All the deprecated methods were removed from MongoDB version as they caused a lot of problems.\n\n## Before you start...\n\nVersion 1.6.1 has A LOT of changes (including breaking ones), it got a lot of new features and bugfixes, the code you will write will become better and more understandable with the powers of **brand new** `BaseManager`, `UserManager`, `GuildManager`'s and lots of new **Classes**!\n\nAlso the typings are now way better with the power of **generic** methods and generic types!\n\nI suggest you to read the [changelog](https://des-docs.js.org/#/docs/main/1.6.9/general/changelog) and the [documentation](https://des-docs.js.org/#/docs/main/1.6.9/general/welcome) to know what's new, what's changed and how to update your code.\n\nAlso you can check the [summary](https://des-docs.js.org/#/docs/main/1.6.9/general/updating) to see the main changes in this update.\n\nNow, remove the usage all the deprecated methods (in MongoDB version, all deprecated methods were removed), change your code to async/awaits and you're ready to go!\n\nHere's a little working MongoDB example:\n\n```js\nconst eco = new Economy({\n    connection: {\n        connectionURI: '...', // mongodb connection uri\n        collectionName: 'collection', // optional\n        dbName: 'db' // optional\n        mongoClientOptions: { ... } // optional\n    }\n})\n\neco.on('ready', async () => {\n    console.log('Economy is ready!')\n\n    const guild = await eco.guilds.get('guildID')\n    const user = await guild.users.get('userID')\n\n    const dailyReward = await user.rewards.getDaily()\n\n\n    console.log(guild.id)\n    console.log(user.id)\n\n    console.log(dailyReward)\n})\n```\n\nAll the examples for both JavaScript and TypeScript are available on [GitHub](https://github.com/shadowplay1/discord-economy-super/tree/main/examples).\n\n## ‚ùó | Useful Links\n\n<ul>\n<li><b><a href = \"https://www.npmjs.com/package/discord-economy-super\">NPM</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super\">GitHub</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super/tree/main/examples\">Bot Examples</a></b></li>\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\n</ul>\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# ‚ù§Ô∏è Thanks for using Discord Economy Super ‚ù§Ô∏è\n","path":"docs/general/migrating-to-mongo.md"},"examples":{"name":"Examples","type":"md","content":"# Discord Economy Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\n\n## Initialation Example\n\n```js\nconst { Client } = require('discord.js');\nconst Economy = require('discord-economy-super');\n\nconst client = new Client({\n  intents: ['GuildMembers', 'GuildMessages'],\n});\n\n\n// these options are optional (and these values are default in the module),\n// they were made to configure the module.\n\n// to change these values for specific guilds, use SettingsManager:\n// https://des-docs.js.org/#/docs/main/1.6.9/class/SettingsManager\n\nlet eco = new Economy({\n    storagePath: './storage.json',\n    updateCountdown: 1000,\n    checkStorage: true,\n    deprecationWarnings: true,\n    sellingItemPercent: 75,\n    savePurchasesHistory: true,\n    dailyAmount: 100,\n    workAmount: [10, 50],\n    weeklyAmount: 1000,\n    dailyCooldown: 60000 * 60 * 24,\n    workCooldown: 60000 * 60,\n    weeklyCooldown: 60000 * 60 * 24 * 7,\n    dateLocale: 'en',\n    updater: {\n        checkUpdates: true,\n        upToDateMessage: true\n    },\n    errorHandler: {\n        handleErrors: true,\n        attempts: 5,\n        time: 3000\n    },\n    optionsChecker: {\n        ignoreInvalidTypes: false,\n        ignoreUnspecifiedOptions: true,\n        ignoreInvalidOptions: false,\n        showProblems: true,\n        sendLog: true,\n        sendSuccessLog: false\n    }\n});\n\nclient.on('ready', () => {\n  console.log(`${client.user.tag} is ready!`);\n});\n\neco.on('ready', economy => {\n  console.log(`Economy is ready!`);\n  eco = economy\n})\n\nclient.login('token');\n```\n\n## Balance Command\n\n```js\nif (command == prefix + 'balance') {\n  const [userID] = args\n  const guild = eco.guilds.get(message.guild.id)\n\n  const user = guild.users.get(\n      message.mentions.users.first()?.id ||\n      message.guild.users.get(userID) ||\n      message.author.id\n)\n\n  const [balance, bank] = [\n      user.balance.get(),\n      user.bank.get()\n  ]\n\n  message.channel.send(\n      `${message.author}'s balance:\\n` +\n      `Coins: **${balance}**.\\n` +\n      `Coins in bank: **${bank}**.`\n  )\n}\n```\n\n## Daily, Work and Weekly Commands\n\n```js\nif (command == prefix + 'daily') {\n  const guild = eco.guilds.get(message.guild.id)\n  const user = guild.users.get(message.author.id)\n\n  const dailyResult = user.rewards.getDaily<false>()\n\n  if (dailyResult.cooldown) {\n      return message.channel.send(\n          `${message.author}, you can claim your daily reward in ${dailyResult.cooldown.pretty}.`\n      )\n  }\n\n  message.channel.send(\n      `${message.author}, you claimed your **${dailyResult.reward}** daily coins!`\n  )\n}\n\n\nif (command == prefix + 'work') {\n  const guild = eco.guilds.get(message.guild.id)\n  const user = guild.users.get(message.author.id)\n\n  const workResult = user.rewards.getWork<true>()\n\n  if (workResult.cooldown) {\n      return message.channel.send(\n          `${message.author}, you can work again in ${workResult.cooldown.pretty}.`\n      )\n  }\n\n  message.channel.send(\n      `${message.author}, you worked hard and earned **${workResult.reward}** coins!`\n  )\n}\n\n\nif (command == prefix + 'weekly') {\n  const guild = eco.guilds.get(message.guild.id)\n  const user = guild.users.get(message.author.id)\n\n  const weeklyResult = user.rewards.getWeekly<true>()\n\n  if (weeklyResult.cooldown) {\n      return message.channel.send(\n          `${message.author}, you can claim your weekly reward in ${weeklyResult.cooldown.pretty}.`\n      )\n  }\n\n  message.channel.send(\n      `${message.author}, you claimed your **${weeklyResult.reward}** weekly coins!`\n  )\n}\n```\n\n## Deposit & Withdraw Commands\n\n```js\nif (command == prefix + 'deposit') {\n  const guild = eco.guilds.get(message.guild.id)\n  const user = guild.users.get(message.author.id)\n\n  const userBalance = user.balance.get()\n  const amount = parseInt(args[0])\n\n  if (userBalance < amount) {\n      return message.channel.send(\n          `${message.author}, you don't have enough coins` +\n          `to perform this deposit.`\n      )\n  }\n\n  user.balance.subtract(amount, `depositted ${amount} coins`)\n  user.bank.add(amount, `depositted ${amount} coins`)\n\n  message.channel.send(\n      `${message.author}, you deposited **${amount}** coins to your bank.`\n  )\n}\n\n\nif (command == prefix + 'withdraw') {\n  const guild = eco.guilds.get(message.guild.id)\n  const user = guild.users.get(message.author.id)\n\n  const userBankBalance = user.bank.get()\n  const amount = parseInt(args[0])\n\n  if (userBankBalance < amount) {\n      return message.channel.send(\n          `${message.author}, you don't have enough coins` +\n          `in your bank to perform this withdraw.`\n      )\n  }\n\n  user.bank.subtract(amount, `withdrew ${amount} coins`)\n  user.balance.add(amount, `withdrew ${amount} coins`)\n\n  message.channel.send(\n      `${message.author}, you withdrew **${amount}** coins from your bank.`\n  )\n}\n```\nSee the full bot examples for both MongoDB and JSON databases in both JavaScript and TypeScript [here](https://github.com/shadowplay1/discord-economy-super/tree/main/examples)!\n\n## ‚ùó | Useful Links\n\n<ul>\n<li><b><a href = 'https://www.npmjs.com/package/discord-economy-super'>NPM</a></b></li>\n<li><b><a href = 'https://github.com/shadowplay1/discord-economy-super'>GitHub</a></b></li>\n<li><b><a href = 'https://github.com/shadowplay1/discord-economy-super/tree/main/examples'>Bot Examples</a></b></li>\n<li><b><a href = 'https://discord.gg/4pWKq8vUnb'>Discord Server</a></b></li>\n</ul>\n<b>If you found a bug, have any questions or need help, join the <a href = 'https://discord.gg/4pWKq8vUnb'>Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# ‚ù§Ô∏è Thanks for using Discord Economy Super ‚ù§Ô∏è\n","path":"docs/general/examples.md"},"global":{"name":"Global Economy","type":"md","content":"# Discord Economy Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\n\n## Introduction\nSo, `discord-economy-super` is built with multi-guild support, but many of the users were asking me how to create a __global__ economy, where all the data is cross-guild, where all the data is available on all the guilds.\n\nThere is a way, and it's very simple!\n\n## Using the module globally\nTo make the data in your economy cross-guild, just use a static value (such as `'global'`, `'123'`, etc.) as **guild ID** in all methods, and the module will work like with only one guild.\n\nFor example: `eco.users.get(message.author.id, 'global')`, where `'global'` is a static value for the guild ID.\n\n`UserManager.get()` accepts a **member ID** and **guiid ID** as the arguments. If you need to store the data globally, you need to use any static value everywhere.\nIt means, the module will work with `'global'` guild, where all the data will be stored. \n\nAll the operations will be performed only to this \"guild\", so the data won't be lost on any other server!\nSee the [FAQ page](https://des-docs.js.org/#/docs/main/1.6.9/general/faq) to see the full example of global economy usage.\n\n## How do I move the data from the guilds to the Global one?\nUse the loop, where you iterate all the database entries, getting the object of every guild, then getting all the guild users and pushing them into the Global guild.\n\nYou can delete the guilds, if it's needed.\n\n```js\nconst STATIC_GLOBAL_GUILD_ID = 'global'\n\nconst database = eco.database.all()\nconst databaseEntries = Object.entries(database)\n\nfor (const [guildID, guildObject] of databaseEntries) {\n    const guildUserEntries = Object.entries(guildObject)\n\n    eco.database.delete(guildID)\n\n    for (const [userID, userObject] of guildUserEntries) {\n        eco.database.set(`${STATIC_GLOBAL_GUILD_ID}.${userID}`, userObject)\n    }\n}\n```\n\n\n## ‚ùó | Useful Links\n\n<ul>\n<li><b><a href = 'https://www.npmjs.com/package/discord-economy-super'>NPM</a></b></li>\n<li><b><a href = 'https://github.com/shadowplay1/discord-economy-super'>GitHub</a></b></li>\n<li><b><a href = 'https://github.com/shadowplay1/discord-economy-super/tree/main/examples'>Bot Examples</a></b></li>\n<li><b><a href = 'https://discord.gg/4pWKq8vUnb'>Discord Server</a></b></li>\n</ul>\n<b>If you found a bug, have any questions or need help, join the <a href = 'https://discord.gg/4pWKq8vUnb'>Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# ‚ù§Ô∏è Thanks for using Discord Economy Super ‚ù§Ô∏è\n","path":"docs/general/global.md"},"updating":{"name":"Updating your code","type":"md","content":"# Discord Economy Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\n\n## ‚úç | Updating your code\n\n## Version 1.6.1\n\nThis version takes much approach on object-orience. The most important changes are:\n\n- new `User-` and `Guild-` managers which are used to get user and guild data from MongoDB.\n- separated classes for every Economy entity (`ShopItem`, `InventoryItem`, `EconomyGuild`, `EconomyUser`, etc)\n- separated classes for every Economy action on users and guilds (`Shop`, `Inventory`, `Rewards`, etc)\n- some of the methods' names and/or return values were changed to make them sound better and more natural. (for example: `BalanceManager.pay(...)` ‚Üí `BalanceManager.transfer(...)`)\n- some of the getter methods and their aliases' names were changed.\n- powerful database caching system for MongoDB\n- ... and many more! You can see the full [changelog](https://des-docs.js.org/#/docs/main/1.6.9/general/changelog) to see all the changes: it will help you on migrating to v1.6.1.\n\nThese changes does not mean you will have to stop using the managers directly. You can use them as you normally would. Classes were provided as another way to use the Economy and make the code cleaner and more readable and understandable. Usage of managers is not deprecated or removed in this update. So, it means, you don't have to do much changes to make your code working again. \n\nFor example, this code will work as before:\n```js\nconst balance = eco.balance.get('123', '123')\nconst inventory = eco.inventory.get('123', '123')\n\nconsole.log(balance)\nconsole.log(inventory)\n```\n\nIf you're looking for MongoDB migration guide, see the [MongoDB Migration Guide](https://des-docs.js.org/#/docs/main/1.6.9/general/migrating-to-mongo).\n\n## Version 1.5.0\n\nIn version 1.5.0, all history related methods in ShopManager are deprecated.\nIt's highly recommended to switch to the new HistoryManager:\n\n- `ShopManager.history()` ==> `HistoryManager.fetch()`\n- `ShopManager.clearHistory()` ==> `HistoryManager.clear()`\n\nSee the [changelog](https://des-docs.js.org/#/docs/main/1.5.2general/changelog) for the full list of changes.\n\n## Version 1.4.7\n\nSince version 1.4.7, all deprecated methods/properties will not be deleted, but not be recommended to use.<br>\nIf you want to receive all the new features and bugfixes, please consider switching from using the deprecated methods/properties.<br>\n[!!!] No support will be provided for any deprecated method or property.\n\nIn this version, all inventory related methods in ShopManager are deprecated.\nIt's highly recommended to switch to the new InventoryManager:\n\n- `ShopManager.inventory()` ==> `InventoryManager.fetch()`\n- `ShopManager.clearInventory()` ==> `InventoryManager.clear()`\n- `ShopManager.useItem()` ==> `InventoryManager.useItem()`\n- `ShopManager.searchInventoryItem()` ==> `InventoryManager.searchItem()`\n\nSee the [changelog](https://des-docs.js.org/#/docs/main/1.4.7/general/changelog) for the full list of changes.\n\n## Version 1.3.2\n\nVersion 1.3.2 takes a much more object-oriented approach than previous versions. It also contains many bug fixes, optimizations and support for new Database Manager.\n\nHere's some examples of methods that were changed in this version:\n\n- `Economy.daily()` ==> `RewardManager.daily()`\n- `Economy.getDailyCooldown()` ==> `CooldownManager.daily()`\n- `Economy.all()` ==> `UtilsManager.all()`\n  <br>\n\nSo you have to change your code like this:\n\n- `eco.daily()` ==> `eco.rewards.daily()`\n- `eco.getDailyCooldown()` ==> `eco.cooldowns.daily()`\n- `eco.all()` ==> `eco.utils.all()`\n\nSee the [changelog](https://des-docs.js.org/#/docs/main/1.3.2/general/changelog) for the full list of changes.\n\n## Version 1.2.5\n\nIn version 1.2.5 everything was optimized and all balance and bank balance methods were moved to objects:\n\n```diff\n- eco.fetch('memberID', 'guildID')\n- eco.set(amount, 'memberID', 'guildID')\n- eco.add(amount, 'memberID', 'guildID')\n- eco.subtract(amount, 'memberID', 'guildID')\n- eco.leaderboard('guildID')\n\n+ eco.balance.fetch('memberID', 'guildID')\n+ eco.balance.set(amount, 'memberID', 'guildID')\n+ eco.balance.add(amount, 'memberID', 'guildID')\n+ eco.balance.subtract(amount, 'memberID', 'guildID')\n+ eco.balance.leaderboard('guildID')\n\n- eco.bankFetch('memberID', 'guildID')\n- eco.bankSet(amount, 'memberID', 'guildID')\n- eco.bankAdd(amount, 'memberID', 'guildID')\n- eco.bankSubtract(amount, 'memberID', 'guildID')\n- eco.bankLeaderboard('guildID')\n\n+ eco.bank.fetch('memberID', 'guildID')\n+ eco.bank.set(amount, 'memberID', 'guildID')\n+ eco.bank.add(amount, 'memberID', 'guildID')\n+ eco.bank.subtract(amount, 'memberID', 'guildID')\n+ eco.bank.leaderboard('guildID')\n```\n\n## ‚ùó | Useful Links\n\n<ul>\n<li><b><a href = \"https://www.npmjs.com/package/discord-economy-super\">NPM</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super\">GitHub</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super/tree/main/examples\">Examples</a></b></li>\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\n</ul>\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# ‚ù§Ô∏è Thanks for using Discord Economy Super ‚ù§Ô∏è\n","path":"docs/general/updating.md"},"changelog":{"name":"Changelog","type":"md","content":"# Discord Economy Super\n\n[![Downloads](https://img.shields.io/npm/dt/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n[![Stable Version](https://img.shields.io/npm/v/discord-economy-super?style=for-the-badge)](https://www.npmjs.com/package/discord-economy-super)\n\n<b>Discord Economy Super</b> - Easy and customizable economy framework for your [Discord Bot](https://discord.js.org/#/).\n\n## ‚è∞ | Changelog\n\n<div>\n\n<b>1.6.9</b>\n\n- Fixed bugs.\n- Fixed typings bugs.\n- Added missing JSDocs for `CacheManager` and all the `CachedItem`s!\n- Added a configuration example in *Initialation Example* on the [Examples](https://des-docs.js.org/#/docs/main/1.6.9/general/examples) page of the module. \n\n<b>1.6.8</b>\n\n- Fixed bugs.\n- Fixed typings bugs.\n- Bank balance caching!\n- Fixed the hard crash in MongoDB version when trying to obtain a balance data for the user from the cache.\n- Added an `updateMany` alias for `updateSpecified` method in `CacheManager`.\n\n<b>1.6.7</b>\n\n- Fixed leaderboard bugs.\n\n<b>1.6.6</b>\n\n- Fixed the bug where `guildID` was `undefined` in `EmptyEconomyUser`, resulting hard crashes on lots of methods (if the user was not found).\n- Removed unnecessary things.\n\n<b>1.6.5</b>\n\n- Fixed the balance not caching correctly\n- Fixed the `INVALID_CACHE_ITEM_NAME` error in MongoDB version that caused a hard crash on any `RewardManager` method.\n\n<b>1.6.4</b>\n\n- Bug fixes\n- Typings fixes\n\n<b>1.6.3</b>\n\n- Major bug fixes\n- Typings fixes\n- Examples bug fixes\n- Linting improvements\n\n<b>1.6.2</b>\n\n- New `Empty-` classes for `EconomyUser` and `EconomyGuild` that will be returned if the user or guild does not exists\n- Added a new `exists` property for `EconomyUser` and `EconomyGuild` classes to check if the user/guild exists in database\n- Balance caching!\n- Fixed bugs\n- Major typings fixes\n- Minor changes in documentation, JSDoc and in main README file\n\n<b>1.6.1</b>\n\n<ul>\n<li><b>Added a MongoDB support!</b></li>\n<li><b>Fixed lots of bugs.</b></li>\n<li><b>Improved typings and now they use generics!</b></li>\n<li><b>Improved JSDocs.</b></li>\n\n<li><b>\n\nRemoved the `./tests` directory from the module as nobody uses it\n\n</b></li>\n<br>\n<li><b>\n\nAdded a new `BaseManager` that allows you to interact with economy items like with arrays!\n\n</b></li>\n\n<li><b>\n\nAdded a new `User`- and `Guild`- managers to directly interact with economy users and guilds.\n\n</b></li>\n\n<li><b>\n\nAdded classes for each economy subject (`ShopItem`, `InventoryItem`, etc).\n\n</b></li>\n<br>\n\n<li><b>\n\nAdded a new `deleteAll()` method for `DatabaseManager` to wipe all the database.\n\n</b></li>\n\n<li><b>\n\nAdded a new `DatabaseManager.pull()` and `pop` methods.`\n\n</b></li>\n<br>\n\n<li><b>\n\n`DatabaseManager.keyList()` was renamed to `DatabaseManager.keysList()`.\n\n</b></li>\n\n<li><b>\n\n`UtilsManager.clearStorage()` was renamed to `UtilsManager.clearDatabase()`.\n\n</b></li>\n<br>\n\n<li><b>\n\n`UtilsManager.reset()` method that resets the all the data from specified user in database, was renamed to `UtilsManager.resetUser()`.\n\n</b></li>\n\n<li><b>\n\n`BalanceManager.pay()` was renamed to `BalanceManager.transfer()`.\n\n</b></li>\n\n<li><b>\n\n`ShopManager.buy()` method's returning value is changed from weird `Boolean | 'max'` type to:\n\n</b></li>\n\n```ts\n{\n    status: boolean,\n    message: string,\n    item: ShopItem,\n    quantity: number,\n    totalPrice: number,\n}\n```\n\n<li><b>\n\nAdded a new `debug` option that enables the Economy debug logs in a console.\n\n</b></li><br>\n\n<li><b>\n\n`ready` event is now returning a fully woring Economy instance that was successfully initialized and could be used without any problems.\n\n</b></li>\n\n<li><b>\n\n`shopItemUse` and `shopItemBuy` events are now returning an information object with guild ID, the person who performed the action, and the item the action was performed on.\n\n</b></li>\n\n<li><b>\n\nAll reward methods' returning values in `RewardManager` were changed from this:\n\n</b></li>\n\n<li><b>\n\n`BalanceManager.transfer(...)` now returns a transferring result object instead of amount of money that was sent.\n\n</b></li>\n\n```ts\n{\n    status: boolean,\n    value: number | TimeObject // money that the user received OR object with the time until the cooldown ends\n    pretty: string | number // formatted cooldown time OR money that the user received\n    reward: number | number[] // depends on what type of reward was specified in a config\n}\n```\n\nto this:\n\n```ts\n{\n    type: 'daily' | 'work' | 'weekly'\n    status: boolean\n    cooldown: {\n        time: TimeObject // object with the time until the cooldown ends\n        pretty: string // formatted cooldown time\n   }\n    reward: number // money that the user received\n    defaultReward: number | number[] // depends on what type of reward was specified in a config\n}\n```\n\n<li><b>\n\nAll reward methods' names in `RewardManager` and getting cooldowns methods in `CooldownManager` are now prefixed with `get`.<br>\n\nFor example, getting a daily reward will look like `eco.rewards.getDaily(...)` instead of `eco.rewards.daily(...)`<br>\n\nGetting the cooldown for daily reward will look like `eco.cooldowns.getDaily(...)` instead of `eco.cooldowns.daily(...)`.</b></li>\n\n<li><b>The message in console if the module s up to date now disabled by default.</b></li>\n\n\n<br>\n\n\n<li><b>\n\nIn `ShopData`, `InventoryData` and `HistoryData`, the `itemName` property was renamed to `name`.\n\n</b></li>\n\n<li><b>\n\n`ShopManager.addItem(guildID, options)` method's options object now accepts the `name` property instead of `itemName`.\n\n</b></li>\n\n<li><b>\n\nAdded a new `custom` property to the economy items anda a new `setCustom()` method for `ShopManager` and `ShopItem` to edit a custom properties object for specified item!\n\n</b></li>\n\n<li><b>\n\nAdded a support for a separated configuration file! Creating a new file `economy.config.js` (or `economy.config.ts` if your project is in TypeScript) in the root directory of your project will set the config in file to the Economy constructor.\n\n</b></li>\n\n<br>\n\n<li><b>Now you can specify a quantity of items to buy, sell or add to the inventory!<br>\nNote that quantity and reason are always optional.</b></li>\n\n```ts\neco.shop.buy(itemID, 'memberID', 'guildID', quantity, 'reason')\n```\n\n<br>\n\n<li><b>\n\nAdded a new **caching** system for MongoDB! The module will cache the data in memory *on startup* and *on database updates* and will be used when you call the method. In these methods you don't have to use Promises and it will be way faster than getting data straightly from database.\n\n```js\nconst databaseUser = await eco.users.get('memberID', 'guildID')\n// gets the user from database - requires to invoke the Promise \n// with 'await' or '.then()'.\n\nconst cachedUser = eco.cache.users.get({\n    memberID: 'memberID',\n    guildID: 'guildID'\n})\n// gets the user from cache - doesn't require to invoke the Promise!\n\n// it means that getting data will be many times faster\n// than getting it from database directly!\n```\n\n</b></li>\n\n</ul>\n\n<b>1.5.2</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Added a 'ShopManager.add()' method as alias for 'InventoryManager.addItem()' method.</b></li>\n</ul>\n\n<b>1.5.1</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed issues with InventoryManager.</b></li>\n</ul>\n\n<b>1.5.0</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed typings.</b></li>\n<li><b>Fixed typos.</b></li>\n<li><b>Fixed issues with 'ShopManager.editItem()' method.</b></li>\n<li><b>Added a new 'changeElement' for the Database manager that will change the element's value in the array.</b></li>\n<li><b>Added a 'InventoryManager.use()' method as alias for 'InventoryManager.useItem()' method.</b></li>\n<li><b>Added a 'ShopManager.edit()' method as alias for 'ShopManager.editItem()' method.</b></li>\n\n<li><b>Important:<br>\nHistory related methods in ShopManager are now deprecated, but they won't be deleted.<br>\nIf you want to use the newest history features and get all the bugfixes,<br>\nplease switch to the new HistoryManager.<br>\n[!!!] No help and support will be provided for deprecated methods.</b></li>\n<br>\n\n```diff\n- ShopManager:\n\n- ShopManager.history(memberID, guildID) [deprecated]\n- ShopManager.clearHistory(memberID, guildID) [deprecated]\n\n\n+ HistoryManager:\n\n+ HistoryManager.fetch(memberID, guildID)\n+ HistoryManager.clear(memberID, guildID)\n+ HistoryManager.add(itemID, memberID, guildID)  // the 'itemID' parameter is item ID from the shop \\\\\n+ HistoryManager.remove(memberID, guildID)\n+ HistoryManager.find(id, memberID, guildID)  // the 'id' parameter is the ID of the history object \\\\\n+ HistoryManager.search(id, memberID, guildID)  // an alias for the method above ^ \\\\\n```\n\n</ul>\n<li><b>Now you can use the random strings in a item message!</b></li>\n\nSyntax: `[random=\"item1\", \"item2\", \"etc...\"]`\n\nExample usage:\n\n```js\neco.shop.addItem(\"guildID\", {\n  name: \"good-day\",\n  price: 100,\n  message: 'What a [random=\"wonderful\", \"great\", \"sunny\"] day!',\n});\n\neco.shop.buy(1, \"memberID\", \"guildID\");\neco.shop.buy(1, \"memberID\", \"guildID\");\neco.shop.buy(1, \"memberID\", \"guildID\"); // buying the item 3 times\n\neco.inventory.useItem(1, \"memberID\", \"guildID\"); // What a wonderful day!\neco.inventory.useItem(1, \"memberID\", \"guildID\"); // What a great day!\neco.inventory.useItem(1, \"memberID\", \"guildID\"); // What a sunny day!\n\n// In a returning string, [random=\"wonderful\", \"great\", \"sunny\"]\n// will be replaced with the any of\n// the words \"wonderful\", \"great\" or \"sunny\".\n```\n\n<b>1.4.9</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed typings.</b></li>\n<li><b>Added a 'savePurchasesHistory' constructor option that will indicate will the module save the purchases history or not.</b></li>\n<li><b>The module will now send a message in console on startup if there's a problem with user's economy configuration.</b></li>\n</ul>\n\n<b>1.4.8</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed typings.</b></li>\n<li><b>Added a 'ShopManager.findItem()' method as alias for 'ShopManager.searchItem()' method.</b></li>\n<li><b>Added a 'ShopManager.buyItem()' method as alias for 'ShopManager.buy()' method.</b></li>\n<li><b>Added a 'ShopManager.fetch()' method as alias for 'ShopManager.list()' method.</b></li>\n<li><b>Added a 'InventoryManager.list()' method as alias for 'InventoryManager.fetch()' method.</b></li>\n<li><b>Added a 'InventoryManager.findItem()' method as alias for 'InventoryManager.searchItem()' method.</b></li>\n<li><b>Added an 'InventoryManager.addItem()' method that adds the specified item to the user's inventory from the shop.</b></li>\n</ul>\n\n<b>1.4.7</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed typings.</b></li>\n<li><b>Fixed typos.</b></li>\n<li><b>Fixed startup issues.</b></li>\n<li><b>Fixed TypeScript examples.</b></li>\n<li><b>Default date locale was changed to 'en' instead of 'ru'.</b></li>\n<li><b>Now you can import all the managers directly from the module. Example:</b></li>\n\n```js\nconst { BalanceManager, ShopManager } = require(\"discord-economy-super\");\n// or\nimport { BalanceManager, ShopManager } from \"discord-economy-super\";\n```\n\n<li><b>Added a new InventoryManager that includes all inventory related methods.</b></li>\n<li><b>Added a 'removeItem' and 'sellItem' methods to the InventoryManager.</b></li>\n<li><b>Added a new 'sellingItemPercent' option that configures the price that<br>\nthe item will be sold for. (It was made for InventoryManager.sellItem method)</b></li>\n\n<li><b>Important:<br>\nInventory related methods in ShopManager are now deprecated, but they won't be deleted.<br>\nIf you want to use the newest inventory features and get all the bugfixes,<br>\nplease switch to the new InventoryManager.<br>\n[!!!] No help and support will be provided for deprecated methods.</b></li>\n<br>\n\n```diff\n- ShopManager:\n\n- ShopManager.inventory(memberID, guildID) [deprecated]\n- ShopManager.clearInventory(memberID, guildID) [deprecated]\n- ShopManager.useItem(itemID, memberID, guildID, client?) [deprecated]\n- ShopManager.searchInventoryItem(itemID, memberID, guildID) [deprecated]\n\n\n+ InventoryManager:\n\n+ InventoryManager.fetch(memberID, guildID)\n+ InventoryManager.clear(memberID, guildID)\n+ InventoryManager.searchItem(itemID, memberID, guildID)\n+ InventoryManager.useItem(itemID, memberID, guildID, client?)\n+ InventoryManager.removeItem(itemID, memberID, guildID)\n+ InventoryManager.sellItem(itemID, memberID, guildID, reason?)\n```\n\n<li><b>Usage of the deprecated methods will now send a deprecation warning in the console.<br>\nYou can disable it by setting the `deprecationWarnings` constructor option to `false`.</b></li>\n</ul>\n\n<b>1.4.6</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Removed \"discord.js\" module from dependencies that was accidentally added.</b></li>\n<li><b>Fixed typings.</b></li>\n</ul>\n\n<b>1.4.5</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed typos in a README.md.</b></li>\n<li><b>Improved the FAQ.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Improved the quality of the code.</b></li>\n<li><b>Added a new 'Economy.shop.searchInventoryItem()' method that searches for the item in user's inventory.</b></li>\n<li><b>Improved the typings: fixed wrong types and typos and replaced the \"any\" types with method's generic type parameters.</b></li>\n<li><b>TypeScript Examples!</b></li>\n</ul>\n\n<b>1.4.4</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n</ul>\n\n<b>1.4.3</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n</ul>\n\n<b>1.4.2</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed typings.</b></li>\n\n</ul>\n\n<b>1.4.1</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n</ul>\n\n<b>1.4.0</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed typings.</b></li>\n<li><b>Now you can put an array with 2 numbers in 'dailyAmount' and 'weeklyAmount' options.</b></li>\n<li><b>Now you can setup the module on different guilds using the brand new Settings Manager.</b></li>\n<li><b>Removed 'lodash' from the dependencies.</b></li>\n<li><b>Made a function that checks the Node.js version on the start.</b></li>\n</ul>\n\n<b>1.3.9</b>\n\n<ul>\n<li><b>Fixed typings.</b></li>\n</ul>\n\n<b>1.3.8</b>\n\n<ul>\n<li><b>Fixed typings.</b></li>\n<li><b>Fixed a hard crash with 'Economy.rewards.work()' method.</b></li>\n</ul>\n\n<b>1.3.7</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed the hard crash if economy configuration is not specified.</b></li>\n</ul>\n\n<b>1.3.6</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed typos.</b></li>\n<li><b>Fixed typings.</b></li>\n<li><b>Fixed the economy options resetting to default.</b></li>\n</ul>\n\n<b>1.3.5</b>\n\n<ul>\n<li><b>Fixed the 'Cannot find module `structures/Errors`' error.</b></li>\n<li><b>Fixed bugs in typings.</b></li>\n</ul>\n\n<b>1.3.4</b>\n\n<ul>\n<li><b>Full code rewrite.</b></li>\n<li><b>Lots of bugfixes.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed typos.</b></li>\n<li><b>Added a new Fetch Manager that allows you to fetch data from database.</b></li>\n<li><b>Added an 'add()', 'subtract()', 'push()' and 'removeElement()' methods in Database Manager.</b></li>\n<li><b>Added a 'checkOptions()' and 'reset()' methods in Utils Manager.</b></li>\n<li><b>Added an 'optionsChecker' object property in constructor options.</b></li>\n<li><b>Added a 'subtractOnBuy' property in constructor options.</b></li>\n<li><b>All typings were separated into files.</b></li>\n<li><b><a href=\"https://des-docs.js.org\">Documentation</a> update: now you can view the docs for a multiple module versions.</b></li>\n<li><b><a href=\"https://des-docs.js.org\">Documentation</a> update: now you can view the weekly downloads of the module on it's main page.</b></li>\n<li><b>... and more!</b></li>\n</ul>\n\n<b>1.3.3</b>\n\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Fixed bugs with Database Manager.</b></li>\n</ul>\n\n<b>1.3.2</b>\n\n<ul>\n<li><b>Fixed typos.</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed the expired link to the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b></li>\n<li><b>Updated README.md.</b></li>\n<li><b>Updated documentation.</b></li>\n<li><b>Added a bank example in module files.</b></li>\n<li><b>Added more examples on <a href=\"https://des-docs.js.org\">documentation website</a>.</b></li>\n<li><b>The entire module structure was rewritten on Managers.</b></li>\n<li><b>Added a new Database Manager that allows you to interact with module's storage file.</b></li>\n\n<b>1.3.0</b>\n\n<ul>\n<li><b>Fixed typos.</b></li>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Updated README.md.</b></li>\n<li><b>Now this module has a <a href=\"https://des-docs.js.org\">documentation website</a>!</b></li>\n<li><b>Added an 'Economy.docs' property that contains a link to the documentation website.</b></li>\n</ul>\n\n<b>1.2.8</b>\n\n<ul>\n<li><b>Fixed typos.</b></li>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Item IDs in shop and inventory are now synced with the last element of array. It fixes the bug with similar item IDs in the shop and inventory.</b></li>\n</ul>\n\n<b>1.2.6</b>\n\n<ul>\n<li><b>Fixed typos.</b></li>\n<li><b>Updated README.md.</b></li>\n<li><b>Now 'ready' and 'destroy' events will return nothing (Void) instead of Boolean.</b></li>\n</ul>\n\n<b>1.2.5</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed typos.</b></li>\n<li><b>Updated typings.</b></li>\n<li><b>Updated examples.</b></li>\n<li><b>discord.js is no longer imported in the module.</b></li>\n<li><b>Added a 'ready' and 'destroy' events. <a href = \"https://www.npmjs.com/package/discord-economy-super#module-events\">Learn more</a>.</b></li>\n<li><b>All balance and bank methods were moved to objects. <a href = \"https://www.npmjs.com/package/discord-economy-super#balance-methods\">Learn more</a>.</b></li>\n<b>Here is the difference between v1.2.4 and v1.2.5.</b>\n\n```diff\n- eco.fetch('123', '123')\n- eco.set(10, '123', '123')\n- eco.add(10, '123', '123')\n- eco.subtract(10, '123', '123')\n- eco.leaderboard('123')\n\n+ eco.balance.fetch('123', '123')\n+ eco.balance.set(10, '123', '123')\n+ eco.balance.add(10, '123', '123')\n+ eco.balance.subtract(10, '123', '123')\n+ eco.balance.leaderboard('123')\n\n- eco.bankFetch('123', '123')\n- eco.bankSet(10, '123', '123')\n- eco.bankAdd(10, '123', '123')\n- eco.bankSubtract(10, '123', '123')\n- eco.bankLeaderboard('123')\n\n+ eco.bank.fetch('123', '123')\n+ eco.bank.set(10, '123', '123')\n+ eco.bank.add(10, '123', '123')\n+ eco.bank.subtract(10, '123', '123')\n+ eco.bank.leaderboard('123')\n```\n\n<li><b>'Economy.balance.leaderboard()' and 'Economy.bank.leaderboard()' methods arrays are now have an 'index' property in object.</b></li>\n</ul>\n\n<b>1.2.4</b>\n\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>'Economy.daily()', '.work()' and '.weekly()' methods will return an object** instead of Number | String.</b></li>\n<li><b>Updated examples.</b></li>\n</ul>\n\n\\*\\* The object structure will look like this:\n\n```js\n{\n    status: Boolean,\n    value: { // object returns if reward is already claimed; else - number\n        days: Number,\n        hours: Number,\n        minutes: Number,\n        seconds: Number,\n        milliseconds: Number\n    },\n    pretty: String | Number,\n    reward: Number | Number[] // array returns if work reward is array\n}\n```\n\n<b>1.2.3</b>\n\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>'Economy.leaderboard()' method will return an empty array if the leaderboard is empty.</b></li>\n<li><b>Updated examples.</b></li>\n<li><b>Fixed typos</b></li>\n</ul>\n\n<b>1.2.2</b>\n\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed another issues with 'Economy.work()' method...</b></li>\n</ul>\n\n<b>1.2.1</b>\n\n<ul>\n<li><b>Fixed minor bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Now 'Economy.work()' method is not taking a daily cooldown as work reward anymore.</b></li>\n<li><b>Added an 'Economy.removeGuild()' method to fully remove the guild from database.</b></li>\n<li><b>Added an 'Economy.removeUser()' method to to remove the user from database.</b></li>\n</ul>\n\n<b>1.2.0</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed typos.</b></li>\n<li><b>'Economy.shop.clearInventory()' method is working fine now.</b></li>\n</ul>\n\n<b>1.1.9</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Fixed type defenitions.</b></li>\n</ul>\n\n<b>1.1.8</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Now you can disable checking a storage file using the 'options.checkStorage' option.</b></li>\n<li><b>Now you can kill the Economy instance using the 'Economy.kill()' method.</b></li>\n<li><b>'Economy.init()' method is not private anymore due to 'Economy.kill()' method.</b></li>\n<li><b>Added an 'interval' property that displays the database checking interval.</b></li>\n<li><b>Now you can clear the entire database using the 'Economy.clearStorage()' method.</b></li>\n<li><b>Now this module is using errors that in 'Economy.errors' property and in './src/errors.js' file.</b></li>\n<li><b>Now you can clear any cooldown using the 'Economy.clearDailyCooldown', 'Economy.clearWorkCooldown' and ''Economy.clearWeeklyCooldown' methods.</b></li>\n<li><b>Added a test for basic Economy methods. You can run it by using these commands:\n\n```console\ncd node_modules/discord-economy-super\nnpm test\n```\n\nThe test will look like this:\n\n![Test](https://cdn.discordapp.com/attachments/764192017542283325/838226957166313472/Screenshot_4.png)\n</b></li>\n\n</ul>\n\n<b>1.1.7</b>\n\n<ul>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>TypeScript support is finally here! Created a type defenitions for this module.</b></li>\n</ul>\n\n<b>1.1.6</b>\n\n<ul>\n<li><b>Code optimization.</b></li>\n<li><b>Fixed bug with \"The module is not ready to work\" error on startup.</b></li>\n<li><b>Removed an accidentaly added \"discord.js\" module from dependencies.</b></li>\n</ul>\n\n<b>1.1.5</b>\n\n<ul>\n<li><b>Edted README.md</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Updated the examples.</b></li>\n<li><b>Fixed the types.</b></li>\n<li><b>Added a Table of Contents in README.md</b></li>\n<li><b>If you have an earlier Node.js version than v14, you will receive an error.</b></li>\n<li><b>Now you can configure the update checking system settings using 'options.updater' properties in constructor options. The 'options.checkUpdates' property was removed in favor of 'options.updater' configuration object. Use 'options.updater.checkUpdates' instead.</b></li>\n<li><b>Added an error handler that will work on startup. You can configure it using 'options.errorHandler' properties in constructor options.</b></li>\n<li><b>Option properties 'description, 'mesasge' and 'maxAmount', in 'Economy.shop.addItem' method are optional now.</b></li>\n<li><b>Now everyone will have a Bank Balance. This is another type of money, you can use it whatever you want. :) | The methods are almost the same: 'Economy.bankFetch()', 'Economy.bankSet()', 'Economy.bankAdd()', 'Economy.bankSubtract()' and 'Economy.bankLeaderboard()'.</b></li>\n<li><b>Added a new events for Bank Balance: 'bankSet', 'bankAdd' and 'bankSubtract'.</b></li>\n<li><b>Now every balance and bank-balance event object is including 'type' and 'balance' properties. The first property is type of the operation ('set', 'add', 'subtract', 'bankSet', 'bankAdd', 'bankSubtract') and the second is user's new balance after the operation was completed successfully.</b></li>\n<li><b>Now you can manually check the module updates using the new 'Economy.checkUpdates()' method.</b></li>\n<li><b>Added an additional 'Economy.ready' and 'Economy.errored' properties to check the module state.</b></li>\n<li><b>Now you can add a role to users on your Discord server. Click <a href=\"https://des-docs.js.org/#/docs/main/1.4.1/class/ShopManager\">here</a> for more info.</b></li>\n<li><b>Added a new 'shopItemBuy' and 'shopItemUse' events.</b></li>\n<li><b>Now if user try to buy an item when he reached the max amount of item in their inventory, the method will return a 'max' string.</b></li>\n<li><b>Now this module has a Support Server. Click <b><a href = \"https://discord.gg/4pWKq8vUnb\">here</a></b> to join!</b></li>\n</ul>\n\n<b>1.1.4</b>\n\n<ul>\n<li><b>Edted README.md</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Added an update checking system for this module.</b></li>\n<li><b>Added a 'checkUpdates' property for economy configuration.</b></li>\n</ul>\n\n<b>1.0.8</b>\n\n<ul>\n<li><b>Edted README.md</b></li>\n<li><b>Fixed bugs.</b></li>\n<li><b>Code optimization.</b></li>\n<li><b>Now this module is including Events. They are listed above.</b></li>\n</ul>\n\n<b>1.0.7</b>\n\n<ul>\n  <li><b>Fixed bugs</b></li>\n</ul>\n\n<b>1.0.6</b>\n\n<ul>\n  <li><b>Edited README.md</b></li>\n  <li><b>Fixed bugs.</b></li>\n  <li><b>Code optimization</b></li>\n  <li><b>Now you can create a shop on your Discord server using Economy.shop methods. They are listed above.</b></li>\n  <li><b>Added an 'EconomyError' class property.</b></li>\n  <li><b>Added a 'dateLocale' property for economy configuration.</b></li>\n</ul>\n\n<b>1.0.5</b>\n\n<ul>\n  <li><b>Fixed bugs.</b></li>\n</ul>\n\n<b>1.0.4</b>\n\n<ul>\n  <li><b>Fixed bugs.</b></li>\n</ul>\n\n<b>1.0.3</b>\n\n<ul>\n  <li><b>Fixed bugs.</b></li>\n</ul>\n\n<b>1.0.2</b>\n\n<ul>\n  <li><b>Edited README.md</b></li>\n</ul>\n\n<b>1.0.1</b>\n\n<ul>\n  <li><b>The first version of the module: added a basic methods: 'Economy.fetch()', 'Economy.set()', 'Economy.add()', 'Economy.subtract()', 'Economy.daily()', 'Economy.work()', 'Economy.getDailyCooldown()', 'Economy.getWorkCooldown()', 'Economy.all()' and 'Economy.leaderboard()'. Also added an EconomyError class, but you couldn't use it yourself.</b></li>\n</ul>\n\n</div>\n\n## ‚ùó | Useful Links\n\n<ul>\n<li><b><a href = \"https://www.npmjs.com/package/discord-economy-super\">NPM</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super\">GitHub</a></b></li>\n<li><b><a href = \"https://github.com/shadowplay1/discord-economy-super/tree/main/examples\">Examples</a></b></li>\n<li><b><a href = \"https://discord.gg/4pWKq8vUnb\">Discord Server</a></b></li>\n</ul>\n\n<br>\n<b>If you found a bug, have any questions or need help, join the <a href = \"https://discord.gg/4pWKq8vUnb\">Support Server</a>.</b>\n<br>\n<b>Module Created by ShadowPlay.</b>\n\n# ‚ù§Ô∏è Thanks for using Discord Economy Super ‚ù§Ô∏è\n","path":"docs/general/changelog.md"}}}},"classes":[{"name":"Economy","description":"The main Economy class.","construct":{"name":"Economy","description":"The Economy class.","params":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]}]},"props":[{"name":"_logger","description":"The Logger class.","access":"private","type":[[["Logger"]]],"meta":{"line":50,"file":"index.js","path":"mongodb/src"}},{"name":"colors","description":"Logger colors.","access":"private","type":[[["LoggerColors"]]],"meta":{"line":57,"file":"index.js","path":"mongodb/src"}},{"name":"_mongo","description":"The QuickMongo instance.","access":"private","type":[[["QuickMongo"]]],"meta":{"line":80,"file":"index.js","path":"mongodb/src"}},{"name":"ready","description":"Module ready status.","nullable":true,"type":[[["boolean"]]],"meta":{"line":86,"file":"index.js","path":"mongodb/src"}},{"name":"errored","description":"Economy errored status.","nullable":true,"type":[[["boolean"]]],"meta":{"line":92,"file":"index.js","path":"mongodb/src"}},{"name":"version","description":"Module version.","type":[[["string"]]],"meta":{"line":98,"file":"index.js","path":"mongodb/src"}},{"name":"docs","description":"Link to the module's documentation website.","type":[[["string"]]],"meta":{"line":108,"file":"index.js","path":"mongodb/src"}},{"name":"utils","description":"Utils manager methods object.","type":[[["UtilsManager"]]],"meta":{"line":114,"file":"index.js","path":"mongodb/src"}},{"name":"options","description":"Economy configuration.","nullable":true,"type":[[["EconomyOptions"]]],"meta":{"line":120,"file":"index.js","path":"mongodb/src"}},{"name":"managers","description":"Econoomy managers list. Made for optimization purposes.","type":[[["Array","<"],["Manager",">"]]],"meta":{"line":126,"file":"index.js","path":"mongodb/src"}},{"name":"interval","description":"Database checking interval.","nullable":true,"type":[[["NodeJSTimeout"]]],"meta":{"line":132,"file":"index.js","path":"mongodb/src"}},{"name":"EconomyError","description":"Economy error class.","type":[[["EconomyError"]]],"meta":{"line":138,"file":"index.js","path":"mongodb/src"}},{"name":"Emitter","description":"Emitter class.","type":[[["Emitter"]]],"meta":{"line":144,"file":"index.js","path":"mongodb/src"}},{"name":"balance","description":"Balance methods object.","type":[[["BalanceManager"]]],"meta":{"line":150,"file":"index.js","path":"mongodb/src"}},{"name":"bank","description":"Bank balance methods object.","type":[[["BankManager"]]],"meta":{"line":156,"file":"index.js","path":"mongodb/src"}},{"name":"database","description":"Database manager methods object.","type":[[["DatabaseManager"]]],"meta":{"line":162,"file":"index.js","path":"mongodb/src"}},{"name":"shop","description":"Shop manager methods object.","type":[[["ShopManager"]]],"meta":{"line":168,"file":"index.js","path":"mongodb/src"}},{"name":"inventory","description":"Inventory manager methods object.","type":[[["InventoryManager"]]],"meta":{"line":174,"file":"index.js","path":"mongodb/src"}},{"name":"history","description":"History manager methods object.","type":[[["HistoryManager"]]],"meta":{"line":180,"file":"index.js","path":"mongodb/src"}},{"name":"cooldowns","description":"Cooldowns methods object.","type":[[["CooldownManager"]]],"meta":{"line":186,"file":"index.js","path":"mongodb/src"}},{"name":"rewards","description":"Rewards methods object.","type":[[["RewardManager"]]],"meta":{"line":192,"file":"index.js","path":"mongodb/src"}},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":198,"file":"index.js","path":"mongodb/src"}},{"name":"users","description":"Economy users.","type":[[["UserManager"]]],"meta":{"line":204,"file":"index.js","path":"mongodb/src"}},{"name":"guilds","description":"Economy guilds.","type":[[["GuildManager"]]],"meta":{"line":210,"file":"index.js","path":"mongodb/src"}},{"name":"settings","description":"Settings manager methods object.","type":[[["SettingsManager"]]],"meta":{"line":216,"file":"index.js","path":"mongodb/src"}},{"name":"economy","description":"Economy instance.","type":[[["Economy"]]],"meta":{"line":222,"file":"index.js","path":"mongodb/src"}}],"methods":[{"name":"kill","description":"Kills the Economy instance.","returns":{"types":[[["Economy"]]],"description":"Economy instance."},"meta":{"line":303,"file":"index.js","path":"mongodb/src"}},{"name":"init","description":"Starts the module.","returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If started successfully: true."},"meta":{"line":325,"file":"index.js","path":"mongodb/src"}},{"name":"_init","description":"Initializes the module.","access":"private","returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If started successfully: true."},"meta":{"line":398,"file":"index.js","path":"mongodb/src"}},{"name":"start","description":"Starts all the managers.","access":"private","returns":{"types":[[["boolean"]]],"description":"If successfully started: true."},"meta":{"line":470,"file":"index.js","path":"mongodb/src"}}],"events":[{"name":"balanceSet","description":"Emits when someone's set the money on the balance.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.type","description":"The type of operation.","type":[[["string"]]]},{"name":"data.guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"data.memberID","description":"Member ID.","type":[[["string"]]]},{"name":"data.amount","description":"Amount of money in completed operation.","type":[[["number"]]]},{"name":"data.balance","description":"User's balance after the operation was completed successfully.","type":[[["number"]]]},{"name":"data.reason","description":"The reason why the operation was completed.","type":[[["string"]]]}],"meta":{"line":595,"file":"index.js","path":"mongodb/src"}},{"name":"balanceAdd","description":"Emits when someone's added the money on the balance.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.type","description":"The type of operation.","type":[[["string"]]]},{"name":"data.guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"data.memberID","description":"Member ID.","type":[[["string"]]]},{"name":"data.amount","description":"Amount of money in completed operation.","type":[[["number"]]]},{"name":"data.balance","description":"User's balance after the operation was completed successfully.","type":[[["number"]]]},{"name":"data.reason","description":"The reason why the operation was completed.","type":[[["string"]]]}],"meta":{"line":607,"file":"index.js","path":"mongodb/src"}},{"name":"balanceSubtract","description":"Emits when someone's subtracts the money from user's balance.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.type","description":"The type of operation.","type":[[["string"]]]},{"name":"data.guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"data.memberID","description":"Member ID.","type":[[["string"]]]},{"name":"data.amount","description":"Amount of money in completed operation.","type":[[["number"]]]},{"name":"data.balance","description":"User's balance after the operation was completed successfully.","type":[[["number"]]]},{"name":"data.reason","description":"The reason why the operation was completed.","type":[[["string"]]]}],"meta":{"line":619,"file":"index.js","path":"mongodb/src"}},{"name":"bankSet","description":"Emits when someone's set the money on the bank balance.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.type","description":"The type of operation.","type":[[["string"]]]},{"name":"data.guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"data.memberID","description":"Member ID.","type":[[["string"]]]},{"name":"data.amount","description":"Amount of money in completed operation.","type":[[["number"]]]},{"name":"data.balance","description":"User's balance after the operation was completed successfully.","type":[[["number"]]]},{"name":"data.reason","description":"The reason why the operation was completed.","type":[[["string"]]]}],"meta":{"line":631,"file":"index.js","path":"mongodb/src"}},{"name":"bankAdd","description":"Emits when someone's added the money on the bank balance.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.type","description":"The type of operation.","type":[[["string"]]]},{"name":"data.guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"data.memberID","description":"Member ID.","type":[[["string"]]]},{"name":"data.amount","description":"Amount of money in completed operation.","type":[[["number"]]]},{"name":"data.balance","description":"User's balance after the operation was completed successfully.","type":[[["number"]]]},{"name":"data.reason","description":"The reason why the operation was completed.","type":[[["string"]]]}],"meta":{"line":643,"file":"index.js","path":"mongodb/src"}},{"name":"bankSubtract","description":"Emits when someone's subtracts the money from user's bank balance.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.type","description":"The type of operation.","type":[[["string"]]]},{"name":"data.guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"data.memberID","description":"Member ID.","type":[[["string"]]]},{"name":"data.amount","description":"Amount of money in completed operation.","type":[[["number"]]]},{"name":"data.balance","description":"User's balance after the operation was completed successfully.","type":[[["number"]]]},{"name":"data.reason","description":"The reason why the operation was completed.","type":[[["string"]]]}],"meta":{"line":655,"file":"index.js","path":"mongodb/src"}},{"name":"shopItemAdd","description":"Emits when someone's added an item in the shop.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.id","description":"Item ID.","type":[[["number"]]]},{"name":"data.name","description":"Item name.","type":[[["string"]]]},{"name":"data.price","description":"Item price.","type":[[["number"]]]},{"name":"data.message","description":"Item message that will be returned on item use.","type":[[["string"]]]},{"name":"data.description","description":"Item description.","type":[[["string"]]]},{"name":"data.maxAmount","description":"Max amount of the item that user can hold in their inventory.","type":[[["number"]]]},{"name":"data.role","description":"Role ID from your Discord server.","type":[[["string"]]]},{"name":"data.date","description":"Formatted date when the item was added to the shop.","type":[[["string"]]]}],"meta":{"line":667,"file":"index.js","path":"mongodb/src"}},{"name":"shopItemRemove","description":"Emits when someone's removed an item in the shop.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.id","description":"Item ID.","type":[[["number"]]]},{"name":"data.name","description":"Item name.","type":[[["string"]]]},{"name":"data.price","description":"Item price.","type":[[["number"]]]},{"name":"data.message","description":"Item message that will be returned on item use.","type":[[["string"]]]},{"name":"data.description","description":"Item description.","type":[[["string"]]]},{"name":"data.maxAmount","description":"Max amount of the item that user can hold in their inventory.","type":[[["number"]]]},{"name":"data.role","description":"Role ID from your Discord server.","type":[[["string"]]]},{"name":"data.date","description":"Formatted date when the item was added to the shop.","type":[[["string"]]]}],"meta":{"line":681,"file":"index.js","path":"mongodb/src"}},{"name":"shopItemBuy","description":"Emits when someone's added an item in the shop.","params":[{"name":"item","description":"Shop item that was bought.","type":[[["ShopItem"]]]}],"meta":{"line":695,"file":"index.js","path":"mongodb/src"}},{"name":"shopItemUse","description":"Emits when someone's used an item from their inventory.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.id","description":"Item ID.","type":[[["number"]]]},{"name":"data.name","description":"Item name.","type":[[["string"]]]},{"name":"data.price","description":"Item price.","type":[[["number"]]]},{"name":"data.message","description":"Item message that will be returned on item use.","type":[[["string"]]]},{"name":"data.description","description":"Item description.","type":[[["string"]]]},{"name":"data.maxAmount","description":"Max amount of the item that user can hold in their inventory.","type":[[["number"]]]},{"name":"data.role","description":"Role ID from your Discord server.","type":[[["string"]]]},{"name":"data.date","description":"Formatted date when the item was added to the shop.","type":[[["string"]]]}],"meta":{"line":701,"file":"index.js","path":"mongodb/src"}},{"name":"shopItemEdit","description":"Emits when someone's edited an item in the shop.","params":[{"name":"data","description":"Data object.","type":[[["object"]]]},{"name":"data.id","description":"Item ID.","type":[[["number"]]]},{"name":"data.guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"data.changedProperty","description":"The item property that was changed.","type":[[["string"]]]},{"name":"data.oldValue","description":"Value before edit.","type":[[["string"]]]},{"name":"data.newValue","description":"Value after edit.","type":[[["string"]]]}],"meta":{"line":715,"file":"index.js","path":"mongodb/src"}},{"name":"ready","description":"Emits when the module is ready.","params":[{"name":"eco","description":"Economy instance that was initialized and could be used.","type":[[["Economy"]]]}],"meta":{"line":726,"file":"index.js","path":"mongodb/src"}},{"name":"destroy","description":"Emits when the module is destroyed.","params":[{"name":"data","description":"Void event.","type":[[["void"]]]}],"meta":{"line":732,"file":"index.js","path":"mongodb/src"}}],"meta":{"line":36,"file":"index.js","path":"mongodb/src"}},{"name":"CachedItem","description":"Cached item class. Used to work with data in Economy cache \n(e.g. getting balance data, shop data, etc. from the cache).","construct":{"name":"CachedItem","description":"Cached item class. Used to work with data in Economy cache \n(e.g. getting balance data, shop data, etc. from the cache).","params":[{"name":"baseConstructor","description":"Constructor that will be called in the methods.","type":[[["any"]]]},{"name":"constructorParams","description":"Array of parameters for `baseConstructor` to pass in.","type":[[["Array","<"],["any",">"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":14,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"CachedGuilds","description":"Cached guilds class. Allows to get the Economy guilds from the cache.","extends":[[["CachedItem"]]],"construct":{"name":"CachedGuilds","description":"Cached guilds class. Allows to get Economy guilds from the cache.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","inherits":"CachedItem#get","inherited":true,"params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","inherits":"CachedItem#update","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","inherits":"CachedItem#updateMany","inherited":true,"params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","inherits":"CachedItem#set","inherited":true,"params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","inherits":"CachedItem#remove","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","inherits":"CachedItem#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","inherits":"CachedItem#has","inherited":true,"params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":20,"file":"CachedItems.js","path":"mongodb/src/cached"}},{"name":"CachedUsers","description":"Cached user class. Allows to get Economy users from the cache","extends":[[["CachedItem"]]],"construct":{"name":"CachedUsers","description":"Cached guilds class. Allows to get Economy guilds from the cache.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","inherits":"CachedItem#get","inherited":true,"params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","inherits":"CachedItem#update","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","inherits":"CachedItem#updateMany","inherited":true,"params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","inherits":"CachedItem#set","inherited":true,"params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","inherits":"CachedItem#remove","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","inherits":"CachedItem#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","inherits":"CachedItem#has","inherited":true,"params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":38,"file":"CachedItems.js","path":"mongodb/src/cached"}},{"name":"CachedCooldowns","description":"Cached cooldowns class. Allows to get cooldowns from the cache.","extends":[[["CachedItem"]]],"construct":{"name":"CachedCooldowns","description":"Cached cooldowns class. Allows to get cooldowns from the cache.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","inherits":"CachedItem#get","inherited":true,"params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","inherits":"CachedItem#update","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","inherits":"CachedItem#updateMany","inherited":true,"params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","inherits":"CachedItem#set","inherited":true,"params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","inherits":"CachedItem#remove","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","inherits":"CachedItem#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","inherits":"CachedItem#has","inherited":true,"params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":57,"file":"CachedItems.js","path":"mongodb/src/cached"}},{"name":"CachedBalance","description":"Cached balance class. Allows to get balance from the cache.","extends":[[["CachedItem"]]],"construct":{"name":"CachedBalance","description":"Cached balance class. Allows to get balance from the cache.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","inherits":"CachedItem#get","inherited":true,"params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","inherits":"CachedItem#update","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","inherits":"CachedItem#updateMany","inherited":true,"params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","inherits":"CachedItem#set","inherited":true,"params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","inherits":"CachedItem#remove","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","inherits":"CachedItem#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","inherits":"CachedItem#has","inherited":true,"params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":76,"file":"CachedItems.js","path":"mongodb/src/cached"}},{"name":"CachedBank","description":"Cached bank balance class. Allows to get bank balance from the cache.","extends":[[["CachedItem"]]],"construct":{"name":"CachedBank","description":"Cached bank balance class. Allows to get bank balance from the cache.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","inherits":"CachedItem#get","inherited":true,"params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","inherits":"CachedItem#update","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","inherits":"CachedItem#updateMany","inherited":true,"params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","inherits":"CachedItem#set","inherited":true,"params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","inherits":"CachedItem#remove","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","inherits":"CachedItem#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","inherits":"CachedItem#has","inherited":true,"params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":95,"file":"CachedItems.js","path":"mongodb/src/cached"}},{"name":"CachedShop","description":"Cached shop class. Allows to get shop from the cache.","extends":[[["CachedItem"]]],"construct":{"name":"CachedShop","description":"Cached shop class. Allows to get shop from the cache.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","inherits":"CachedItem#get","inherited":true,"params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","inherits":"CachedItem#update","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","inherits":"CachedItem#updateMany","inherited":true,"params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","inherits":"CachedItem#set","inherited":true,"params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","inherits":"CachedItem#remove","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","inherits":"CachedItem#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","inherits":"CachedItem#has","inherited":true,"params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":114,"file":"CachedItems.js","path":"mongodb/src/cached"}},{"name":"CachedInventory","description":"Cached inventory class. Allows to get inventory from the cache.","extends":[[["CachedItem"]]],"construct":{"name":"CachedInventory","description":"Cached inventory class. Allows to get inventory from the cache.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","inherits":"CachedItem#get","inherited":true,"params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","inherits":"CachedItem#update","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","inherits":"CachedItem#updateMany","inherited":true,"params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","inherits":"CachedItem#set","inherited":true,"params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","inherits":"CachedItem#remove","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","inherits":"CachedItem#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","inherits":"CachedItem#has","inherited":true,"params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":132,"file":"CachedItems.js","path":"mongodb/src/cached"}},{"name":"CachedHistory","description":"Cached history class. Allows to get history from the cache.","extends":[[["CachedItem"]]],"construct":{"name":"CachedHistory","description":"Cached history class. Allows to get history from the cache.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]},{"name":"cacheManager","description":"Cache manager instance.","type":[[["CacheManager"]]]}]},"props":[{"name":"cache","description":"Cache object.","access":"private","type":[[["object"]]],"meta":{"line":33,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"options","description":"Economy options.","type":[[["EconomyOptions"]]],"meta":{"line":39,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]],"meta":{"line":45,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"constructorParams","description":"Constructor parameters to pass to the constructor.","type":[[["Array","<"],["any",">"]]],"meta":{"line":51,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":58,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"cacheManager","description":"Cache Manager.","type":[[["CacheManager"]]],"meta":{"line":64,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"methods":[{"name":"get","description":"Gets the data from a cache.","inherits":"CachedItem#get","inherited":true,"params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":{"types":[[["any"]]],"description":"Value from cache."},"meta":{"line":72,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"update","description":"Syncs the cache in a cached item with database for specified user/guild.","inherits":"CachedItem#update","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":156,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"updateMany","description":"Syncs entries with the cache in cached item with database for specified user/guild.","inherits":"CachedItem#updateMany","inherited":true,"params":[{"name":"ids","description":"Identifiers objects (memberID, guildID) to get value from cache.","variable":true,"type":[[["Array","<"],["DataIdentifier",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":280,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"set","description":"Sets the value to the key in a cache.","inherits":"CachedItem#set","inherited":true,"params":[{"name":"key","description":"Key to set in cache.","type":[[["string"]]]},{"name":"value","description":"Value to set to cache.","type":[[["any"]]]}],"returns":{"types":[[["any"]]],"description":"Value that was set."},"meta":{"line":296,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"remove","description":"Removes a key from a cache in a cached item.","inherits":"CachedItem#remove","inherited":true,"params":[{"name":"id","description":"Identifier object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["void"]]],"meta":{"line":306,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"clear","description":"Clears the cache in a cached item.","inherits":"CachedItem#clear","inherited":true,"returns":[[["void"]]],"meta":{"line":368,"file":"CachedItem.js","path":"mongodb/src/cached"}},{"name":"has","description":"Determine if a key exists in the cache.","inherits":"CachedItem#has","inherited":true,"params":[{"name":"key","description":"Key to check if exists in cache.","type":[[["string"]]]}],"returns":{"types":[[["boolean"]]],"description":"True if key exists in cache, false if not."},"meta":{"line":377,"file":"CachedItem.js","path":"mongodb/src/cached"}}],"meta":{"line":151,"file":"CachedItems.js","path":"mongodb/src/cached"}},{"name":"BalanceItem","description":"Balance item class.","construct":{"name":"BalanceItem","description":"User balance class.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"balanceObject","description":"User balance object.","type":[[["BalanceObject"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":22,"file":"BalanceItem.js","path":"mongodb/src/classes"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":28,"file":"BalanceItem.js","path":"mongodb/src/classes"}},{"name":"money","description":"User's balance.","type":[[["number"]]],"meta":{"line":34,"file":"BalanceItem.js","path":"mongodb/src/classes"}},{"name":"bank","description":"User balance object.","type":[[["number"]]],"meta":{"line":40,"file":"BalanceItem.js","path":"mongodb/src/classes"}}],"meta":{"line":6,"file":"BalanceItem.js","path":"mongodb/src/classes"}},{"name":"BankBalanceItem","description":"Bank balance item class.","construct":{"name":"BankBalanceItem","description":"User bank balance class.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"bankBalanceObject","description":"User bank balance object.","type":[[["BalanceObject"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":22,"file":"BankBalanceItem.js","path":"mongodb/src/classes"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":28,"file":"BankBalanceItem.js","path":"mongodb/src/classes"}},{"name":"balance","description":"User bank balance object.","type":[[["number"]]],"meta":{"line":34,"file":"BankBalanceItem.js","path":"mongodb/src/classes"}}],"meta":{"line":6,"file":"BankBalanceItem.js","path":"mongodb/src/classes"}},{"name":"CooldownItem","description":"Cooldown item class.","construct":{"name":"CooldownItem","description":"User cooldowns class.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"cooldownsObject","description":"User cooldowns object.","type":[[["CooldownsObject"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":23,"file":"CooldownItem.js","path":"mongodb/src/classes"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":29,"file":"CooldownItem.js","path":"mongodb/src/classes"}},{"name":"daily","description":"Daily cooldown.","type":[[["number"]]],"meta":{"line":36,"file":"CooldownItem.js","path":"mongodb/src/classes"}},{"name":"work","description":"Work cooldown.","type":[[["number"]]],"meta":{"line":42,"file":"CooldownItem.js","path":"mongodb/src/classes"}},{"name":"weekly","description":"Weekly cooldown.","type":[[["number"]]],"meta":{"line":48,"file":"CooldownItem.js","path":"mongodb/src/classes"}}],"meta":{"line":7,"file":"CooldownItem.js","path":"mongodb/src/classes"}},{"name":"EconomyGuild","description":"Economy guild class.","construct":{"name":"EconomyGuild","description":"Economy guild class.","params":[{"name":"id","description":"Guild ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"guildObject","description":"Economy guild object.","type":[[["any"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"users","description":"Guild User Manager.","type":[[["UserManager"]]],"meta":{"line":34,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"id","description":"Guild ID.","type":[[["string"]]],"meta":{"line":40,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"exists","description":"Determine if the guild exists in the database.","type":[[["boolean"]]],"meta":{"line":46,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":53,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"utils","description":"Utils Manager.","access":"private","type":[[["UtilsManager"]]],"meta":{"line":60,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"shop","description":"Guild Shop.","type":[[["Shop"]]],"meta":{"line":66,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"leaderboards","description":"Guild Leaderboards.","type":[[["Leaderboards"]]],"meta":{"line":72,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"settings","description":"Guild Settings.","type":[[["Settings"]]],"meta":{"line":78,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"_cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":85,"file":"EconomyGuild.js","path":"mongodb/src/classes"}}],"methods":[{"name":"delete","description":"Deletes the guild from database.","async":true,"returns":{"types":[[["Promise","<"],["EconomyGuild",">"]]],"description":"Deleted guild object."},"meta":{"line":98,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"reset","description":"Sets the default guild object for a specified member.","async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If reset successfully: true; else: false."},"meta":{"line":112,"file":"EconomyGuild.js","path":"mongodb/src/classes"}}],"meta":{"line":17,"file":"EconomyGuild.js","path":"mongodb/src/classes"}},{"name":"EconomyUser","description":"Economy user class.","construct":{"name":"EconomyUser","description":"Economy user class.","params":[{"name":"id","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"userObject","description":"Economy user object.","type":[[["RawEconomyUser"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"id","description":"User ID.","type":[[["string"]]],"meta":{"line":38,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":44,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"money","description":"User's balance.","type":[[["number"]]],"meta":{"line":50,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"exists","description":"Determine if the user exists in the database.","type":[[["boolean"]]],"meta":{"line":56,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":63,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"_shop","description":"Shop Manager.","access":"private","type":[[["ShopManager"]]],"meta":{"line":70,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"cooldowns","description":"User cooldowns.","type":[[["Cooldowns"]]],"meta":{"line":76,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"history","description":"User history.","type":[[["History"]]],"meta":{"line":82,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"inventory","description":"User inventory.","type":[[["Inventory"]]],"meta":{"line":88,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"balance","description":"User balance.","type":[[["Balance"]]],"meta":{"line":94,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"bank","description":"User bank balance.","type":[[["Bank"]]],"meta":{"line":100,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"rewards","description":"User rewards.","type":[[["Rewards"]]],"meta":{"line":106,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"items","description":"User items.","type":[[["Items"]]],"meta":{"line":112,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"_cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":119,"file":"EconomyUser.js","path":"mongodb/src/classes"}}],"methods":[{"name":"delete","description":"Deletes the user from database.","async":true,"returns":{"types":[[["Promise","<"],["EconomyUser",">"]]],"description":"Deleted user object."},"meta":{"line":133,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"reset","description":"Sets the default user object for a specified member.","async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If reset successfully: true; else: false."},"meta":{"line":148,"file":"EconomyUser.js","path":"mongodb/src/classes"}}],"meta":{"line":21,"file":"EconomyUser.js","path":"mongodb/src/classes"}},{"name":"EmptyEconomyGuild","description":"Empty economy guild class.","construct":{"name":"EmptyEconomyGuild","description":"Economy guild class.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"exists","description":"Determine if the guild exists in the database.","type":[[["boolean"]]],"meta":{"line":23,"file":"EmptyEconomyGuild.js","path":"mongodb/src/classes"}}],"meta":{"line":7,"file":"EmptyEconomyGuild.js","path":"mongodb/src/classes"}},{"name":"EmptyEconomyUser","description":"Empty economy user class.","construct":{"name":"EmptyEconomyUser","description":"Economy user class.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"exists","description":"Determine if the user exists in the database.","type":[[["boolean"]]],"meta":{"line":26,"file":"EmptyEconomyUser.js","path":"mongodb/src/classes"}}],"meta":{"line":9,"file":"EmptyEconomyUser.js","path":"mongodb/src/classes"}},{"name":"Leaderboards","description":"Guild leaderboards.","construct":{"name":"Leaderboards","description":"Guild leaderboards class.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"guildID","description":"Guild ID.","access":"private","type":[[["string"]]],"meta":{"line":24,"file":"Leaderboards.js","path":"mongodb/src/classes/guild"}},{"name":"_balance","description":"Balance Manager.","access":"private","type":[[["BalanceManager"]]],"meta":{"line":31,"file":"Leaderboards.js","path":"mongodb/src/classes/guild"}},{"name":"_bank","description":"Bank Manager.","access":"private","type":[[["BankManager"]]],"meta":{"line":38,"file":"Leaderboards.js","path":"mongodb/src/classes/guild"}}],"methods":[{"name":"money","description":"Gets a money leaderboard for this guild.","returns":{"types":[[["Promise","<"],["Array","<"],["BalanceLeaderboard",">>"]]],"description":"Balance leaderboard array."},"meta":{"line":45,"file":"Leaderboards.js","path":"mongodb/src/classes/guild"}},{"name":"bank","description":"Gets a bank balance leaderboard for this guild.","returns":{"types":[[["Promise","<"],["Array","<"],["BankLeaderboard",">>"]]],"description":"Bank balance leaderboard array."},"meta":{"line":53,"file":"Leaderboards.js","path":"mongodb/src/classes/guild"}}],"meta":{"line":8,"file":"Leaderboards.js","path":"mongodb/src/classes/guild"}},{"name":"Settings","description":"Guild Settings.","construct":{"name":"Settings","description":"Guild settings class.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"guildID","description":"Guild ID.","access":"private","type":[[["string"]]],"meta":{"line":23,"file":"Settings.js","path":"mongodb/src/classes/guild"}},{"name":"_settings","description":"Settings Manager.","access":"private","type":[[["SettingsManager"]]],"meta":{"line":30,"file":"Settings.js","path":"mongodb/src/classes/guild"}}],"methods":[{"name":"all","description":"Fetches the server's settings object.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["SettingsTypes",">"]]],"description":"The server settings object."},"meta":{"line":38,"file":"Settings.js","path":"mongodb/src/classes/guild"}},{"name":"get","description":"Gets the specified setting from the database.\n\nNote: If the server don't have any setting specified,\nthe module will take the values from the\nconfiguration or default configuration.","params":[{"name":"key","description":"The setting to fetch.","type":[[["Settings"]]]}],"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"The setting from the database."},"meta":{"line":52,"file":"Settings.js","path":"mongodb/src/classes/guild"}},{"name":"set","description":"Changes the specified setting.\n\nNote: If the server don't have any setting specified,\nthe module will take the values from the\nspecified configuration or default configuration.","params":[{"name":"key","description":"The setting to change.","type":[[["Settings"]]]},{"name":"value","description":"The value to set.","type":[[["any"]]]}],"returns":{"types":[[["Promise","<"],["SettingsTypes",">"]]],"description":"The server settings object."},"meta":{"line":67,"file":"Settings.js","path":"mongodb/src/classes/guild"}},{"name":"remove","description":"Removes the specified setting.\n\nNote: If the server don't have any setting specified,\nthe module will take the values from the\nspecified configuration or default configuration.","params":[{"name":"key","description":"The setting to remove.","type":[[["Settings"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["SettingsTypes",">"]]],"description":"The server settings object."},"meta":{"line":82,"file":"Settings.js","path":"mongodb/src/classes/guild"}},{"name":"reset","description":"Resets all the settings to setting that are in configuration.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["SettingsTypes",">"]]],"description":"The server settings object."},"meta":{"line":91,"file":"Settings.js","path":"mongodb/src/classes/guild"}}],"meta":{"line":8,"file":"Settings.js","path":"mongodb/src/classes/guild"}},{"name":"Shop","description":"Guild shop class.","extends":[[["BaseManager"]]],"construct":{"name":"Shop","description":"Guild shop constructor.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database object.","type":[[["object"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"guildID","description":"Guild ID.","access":"private","type":[[["string"]]],"meta":{"line":27,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["ShopManager"]]],"meta":{"line":34,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"_shop","description":"Shop manager.","access":"private","type":[[["ShopManager"]]],"meta":{"line":41,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":63,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":77,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":83,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","access":"private","type":[[["any"]]],"meta":{"line":96,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"emptyBaseConstructor","description":"An empty constructor (EmptyEconomyUser, EmptyEconomyGuild, etc.) to replace the `undefined` value with.","access":"private","type":[[["any"]]],"meta":{"line":103,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"length","description":"Number of specific element in database.","type":[[["number"]]],"meta":{"line":109,"file":"BaseManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"findItem","description":"Gets the item in the shop.","params":[{"name":"itemID","description":"Item ID.","type":[[["string"]],[["number"]]]}],"returns":{"types":[[["Promise","<"],["ShopItem",">"]]],"description":"Shop item."},"meta":{"line":49,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"addItem","description":"Creates an item in shop.","params":[{"name":"options","description":"Configuration with item info.","type":[[["AddItemOptions"]]]}],"returns":{"types":[[["Promise","<"],["ItemData",">"]]],"description":"Item info."},"meta":{"line":58,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"add","description":"Creates an item in shop.\n\nThis method is an alias for the `Shop.addItem()` method.","params":[{"name":"options","description":"Configuration with item info.","type":[[["AddItemOptions"]]]}],"returns":{"types":[[["Promise","<"],["ItemData",">"]]],"description":"Item info."},"meta":{"line":69,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"editItem","description":"Edits the item in the shop.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"itemProperty","description":"This argument means what thing in item you want to edit (item property). \nAvailable item properties are 'description', 'price', 'name', 'message', 'amount', 'role', 'custom'.","type":[[["description","'"]],[["price","'"]],[["name","'"]],[["message","'"]],[["maxAmount","'"]],[["role","'"]]]},{"name":"value","description":"Any value to set.","type":[[["any"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If edited successfully: true, else: false."},"meta":{"line":83,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"edit","description":"Edits the item in the shop.\n\nThis method is an alias for the `Shop.editItem()` method.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"itemProperty","description":"This argument means what thing in item you want to edit (item property). \nAvailable item properties are 'description', 'price', 'name', 'message', 'amount', 'role', 'custom'.","type":[[["description","'"]],[["price","'"]],[["name","'"]],[["message","'"]],[["maxAmount","'"]],[["role","'"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If edited successfully: true, else: false."},"meta":{"line":98,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"setCustom","description":"Sets a custom object for the item.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"custom","description":"Custom item data object.","type":[[["object"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If set successfully: true, else: false."},"meta":{"line":108,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"clear","description":"Clears the shop.","returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true, else: false."},"meta":{"line":116,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"all","description":"Gets all items in the shop.","async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["ShopItem",">>"]]],"description":"Guild shop array."},"meta":{"line":124,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"get","description":"Gets all items in the shop.\n\nThis method is an alias for the `Shop.findItem()` method.","params":[{"name":"itemID","description":"Item ID.","type":[[["string"]],[["number"]]]}],"returns":{"types":[[["Promise","<"],["ShopItem",">"]]],"description":"Shop item."},"meta":{"line":136,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"first","description":"Gets the first element in specified guild.","inherits":"BaseManager#first","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"First database object."},"meta":{"line":120,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"last","description":"Gets the last element in specified guild.","inherits":"BaseManager#last","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Last database object."},"meta":{"line":171,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toArray","description":"Returns an array of elements in specified guild.","inherits":"BaseManager#toArray","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Array of elements in specified guild."},"meta":{"line":223,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"find","description":"This method is the same as `Array.find()`.\n\nFinds the element in array and returns it.","inherits":"BaseManager#find","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Database object."},"meta":{"line":278,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"at","description":"Gets the element at the specified index in the elements array.","inherits":"BaseManager#at","inherited":true,"params":[{"name":"index","description":"Index of the user.","type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Object at the specified index."},"meta":{"line":305,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"findIndex","description":"This method is the same as `Array.findIndex()`. \n\nFinds the element's index in array and returns it.","inherits":"BaseManager#findIndex","inherited":true,"params":[{"name":"predicate","description":"Find calls predicate once for each element of the array, in ascending order, \nuntil it finds one where predicate returns true. \nIf such an element is found, findIndex immediately returns that element index. \nOtherwise, findIndex returns -1.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index."},"meta":{"line":364,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"includes","description":"This method is the same as `Array.includes()`. \n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#includes","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The position in this array at which to begin searching for searchElement.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":379,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"has","description":"This method is the same as `Array.includes()`.\n\nThis method is an alias for `UserManager.includes()` method.\n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#has","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":398,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"indexOf","description":"This method is the same as `Array.indexOf()`.","inherits":"BaseManager#indexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":414,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"lastIndexOf","description":"This method is the same as `Array.lastIndexOf()`.","inherits":"BaseManager#lastIndexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin searching backward. \nIf fromIndex is omitted, the search starts at the last index in the array.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":430,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"reverse","description":"This method is the same as `Array.reverse()`. \n\nReverses the array of all elements and returns it.","inherits":"BaseManager#reverse","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Reversed elements array."},"meta":{"line":443,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"sort","description":"This method is the same as `Array.sort()`.\n\nSorts an array in place. This method mutates the array and returns a reference to the same array.","inherits":"BaseManager#sort","inherited":true,"params":[{"name":"compareFn","description":"Function used to determine the order of the elements. \nIt is expected to return a negative value if first argument is less than second argument, \nzero if they're equal and a positive value otherwise. \nIf omitted, the elements are sorted in ascending, ASCII character order.","optional":true,"type":[[["CompareFunction"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Sorted elements array."},"meta":{"line":461,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"filter","description":"This method is the same as `Array.filter()`.\n\nFilters the array by specified condition and returns the array.","inherits":"BaseManager#filter","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":480,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"map","description":"This method is the same as `Array.map()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#map","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":500,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"forEach","description":"This method is the same as `Array.forEach()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#forEach","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":520,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"some","description":"This method is the same as `Array.some()`. \n\nDetermines whether the specified callback function returns true for any element of an array.","inherits":"BaseManager#some","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe some method calls the predicate function for each element in the array\nuntil the predicate returns a value which is coercible to the Boolean value true, \nor until the end of the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is any of the elements meets the specified condition."},"meta":{"line":541,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"values","description":"Returns an iterable of values in the array.","inherits":"BaseManager#values","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["IterableIterator","<"],["any",">>"]]],"description":"An iterable of values in the array."},"meta":{"line":552,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toString","description":"Returns a string representation of an array.","inherits":"BaseManager#toString","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"String representation of an array."},"meta":{"line":563,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":10,"file":"Shop.js","path":"mongodb/src/classes/guild"}},{"name":"HistoryItem","description":"History item class.","construct":{"name":"HistoryItem","description":"History item class.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"itemObject","description":"User purchases history item object.","type":[[["HistoryData"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":28,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":34,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]],"meta":{"line":40,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"id","description":"Item ID in history.","type":[[["number"]]],"meta":{"line":46,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"name","description":"Item name.","type":[[["string"]]],"meta":{"line":52,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"price","description":"Item price.","type":[[["number"]]],"meta":{"line":58,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"message","description":"The message that will be returned on item use.","type":[[["string"]]],"meta":{"line":64,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"date","description":"Date when the item was bought by a user.","type":[[["string"]]],"meta":{"line":70,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"role","description":"ID of Discord Role that will be given to Wuser on item use.","type":[[["string"]]],"meta":{"line":76,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":83,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":90,"file":"HistoryItem.js","path":"mongodb/src/classes"}}],"methods":[{"name":"delete","description":"Removes the item from the history.\n\nThis method is an alias for 'HistoryItem.remove()' method.","returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":103,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"remove","description":"Removes the item from the history.","async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":111,"file":"HistoryItem.js","path":"mongodb/src/classes"}}],"meta":{"line":11,"file":"HistoryItem.js","path":"mongodb/src/classes"}},{"name":"InventoryItem","description":"Inventory item class.","extends":[[["Emitter"]]],"construct":{"name":"InventoryItem","description":"Inventory item class.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"itemObject","description":"Economy guild object.","type":[[["InventoryData"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]],"meta":{"line":34,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"itemObject","description":"Item object.","type":[[["InventoryData"]]],"meta":{"line":40,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":46,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"memberID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":52,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"id","description":"Inventory item ID.","type":[[["number"]]],"meta":{"line":59,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"name","description":"Item name.","type":[[["string"]]],"meta":{"line":65,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"price","description":"Item price.","type":[[["number"]]],"meta":{"line":71,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"message","description":"The message that will be returned on item use.","type":[[["string"]]],"meta":{"line":77,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"role","description":"ID of Discord Role that will be given to Wuser on item use.","type":[[["string"]]],"meta":{"line":83,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"maxAmount","description":"Max amount of the item that user can hold in their inventory.","type":[[["number"]]],"meta":{"line":89,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"date","description":"Date when the item was added in the shop.","type":[[["string"]]],"meta":{"line":95,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"quantity","description":"Quantity of the item.","type":[[["number"]]],"meta":{"line":101,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"settings","description":"Settings manager methods object.","access":"private","type":[[["SettingsManager"]]],"meta":{"line":113,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":120,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":127,"file":"InventoryItem.js","path":"mongodb/src/classes"}}],"methods":[{"name":"delete","description":"Removes an item from the shop.","params":[{"name":"quantity","description":"Quantity of items to delete.\n\nThis method is an alias for 'InventoryItem.remove()' method.","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":137,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"remove","description":"Removes an item from the shop.","params":[{"name":"quantity","description":"Quantity of items to delete.","optional":true,"default":1,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":146,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"use","description":"Uses the item from user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"client","description":"Discord Client [Specify if the role will be given in a Discord server].","optional":true,"type":[[["Client"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Item message."},"meta":{"line":175,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"sell","description":"Removes the item from user's inventory\nand adds its price to the user's balance.\nThis is the same as selling something.","params":[{"name":"quantity","description":"Quantity of items to sell.","optional":true,"default":1,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["SellingOperationInfo",">"]]],"description":"Selling operation info."},"meta":{"line":263,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":16,"file":"InventoryItem.js","path":"mongodb/src/classes"}},{"name":"ShopItem","description":"Shop item class.","extends":[[["Emitter"]]],"construct":{"name":"ShopItem","description":"Shop item class.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"itemObject","description":"Shop item object.","type":[[["ItemData"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":30,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"itemObject","description":"Item object.","type":[[["ItemData"]]],"meta":{"line":36,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"id","description":"Shop item ID.","type":[[["number"]]],"meta":{"line":42,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]],"meta":{"line":48,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"name","description":"Item name.","type":[[["string"]]],"meta":{"line":54,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"price","description":"Item price.","type":[[["number"]]],"meta":{"line":60,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"message","description":"The message that will be returned on item use.","type":[[["string"]]],"meta":{"line":66,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"description","description":"Item description.","type":[[["string"]]],"meta":{"line":72,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"role","description":"ID of Discord Role that will be given to Wuser on item use.","type":[[["string"]]],"meta":{"line":78,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"maxAmount","description":"Max amount of the item that user can hold in their inventory.","type":[[["number"]]],"meta":{"line":84,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"date","description":"Date when the item was added in the shop.","type":[[["string"]]],"meta":{"line":90,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"custom","description":"Custom item data object.","type":[[["object"]]],"meta":{"line":96,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":103,"file":"ShopItem.js","path":"mongodb/src/classes"}}],"methods":[{"name":"isEnoughMoneyFor","description":"Checks for is the specified user has enough money to buy the item.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"quantity","description":"Quantity of the items to buy.","optional":true,"default":1,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the user has enough money to buy the item."},"meta":{"line":117,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"isInInventory","description":"Checks for is the specified user has the item in their inventory.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the user has the item in their inventory."},"meta":{"line":127,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"edit","description":"Edits the item in the shop.","params":[{"name":"itemProperty","description":"This argument means what thing in item you want to edit (item property). \nAvailable item properties are 'description', 'price', 'name', 'message', 'amount', 'role', 'custom'.","type":[[["description","\""]],[["price","\""]],[["name","\""]],[["message","\""]],[["maxAmount","\""]],[["role","\""]],[["custom","'"]]]},{"name":"value","description":"Any value to set.","type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If edited successfully: true, else: false."},"meta":{"line":142,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"setCustom","description":"Sets a custom object for the item.","params":[{"name":"custom","description":"Custom item data object.","type":[[["object"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If set successfully: true, else: false."},"meta":{"line":222,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"delete","description":"Removes an item from the shop.\n\nThis method is an alias for 'ShopItem.remove()' method.","returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":232,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"remove","description":"Removes an item from the shop.","async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":240,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":14,"file":"ShopItem.js","path":"mongodb/src/classes"}},{"name":"Balance","description":"User balance class.","construct":{"name":"Balance","description":"User balance class.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":25,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":31,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"_balance","description":"Balance Manager.","access":"private","type":[[["BalanceManager"]]],"meta":{"line":38,"file":"Balance.js","path":"mongodb/src/classes/user"}}],"methods":[{"name":"set","description":"Sets the money amount on user's balance.","params":[{"name":"amount","description":"Money amount","type":[[["number"]]]},{"name":"reason","description":"The reason why you set the money.","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount"},"meta":{"line":47,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"add","description":"Adds the money amount on user's balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"reason","description":"The reason why you add the money.","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":57,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"subtract","description":"Subtracts the money amount on user's balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"reason","description":"The reason why you subtract the money.","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":67,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"get","description":"Fetches the user's balance.","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"User's balance."},"meta":{"line":75,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"fetch","description":"Fetches the user's balance.\n\nThis method is an alias for 'Balance.get()' method","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"User's balance."},"meta":{"line":85,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"transfer","description":"Sends the money to a specified user.","params":[{"name":"options","description":"Transferring options.","type":[[["UserTransferringOptions"]]]}],"returns":{"types":[[["Promise","<"],["TransferringResult",">"]]],"description":"Transferring result object."},"meta":{"line":94,"file":"Balance.js","path":"mongodb/src/classes/user"}}],"meta":{"line":9,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"Bank","description":"User bank balance class.","construct":{"name":"Bank","description":"User balance class.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":24,"file":"Bank.js","path":"mongodb/src/classes/user"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":30,"file":"Bank.js","path":"mongodb/src/classes/user"}},{"name":"_bank","description":"Balance Manager.","access":"private","type":[[["BankManager"]]],"meta":{"line":37,"file":"Bank.js","path":"mongodb/src/classes/user"}}],"methods":[{"name":"set","description":"Sets the money amount on user's balance.","params":[{"name":"amount","description":"Money amount","type":[[["number"]]]},{"name":"reason","description":"The reason why you set the money.","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount"},"meta":{"line":46,"file":"Bank.js","path":"mongodb/src/classes/user"}},{"name":"add","description":"Adds the money amount on user's balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"reason","description":"The reason why you add the money.","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":56,"file":"Bank.js","path":"mongodb/src/classes/user"}},{"name":"subtract","description":"Subtracts the money amount on user's balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"reason","description":"The reason why you subtract the money.","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":66,"file":"Bank.js","path":"mongodb/src/classes/user"}},{"name":"get","description":"Fetches the user's balance.","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"User's balance."},"meta":{"line":74,"file":"Bank.js","path":"mongodb/src/classes/user"}},{"name":"fetch","description":"Fetches the user's balance.\n\nThis method is an alias for 'Balance.get()' method","returns":{"types":[[["Promise","<"],["number",">"]]],"description":"User's balance."},"meta":{"line":84,"file":"Bank.js","path":"mongodb/src/classes/user"}}],"meta":{"line":8,"file":"Bank.js","path":"mongodb/src/classes/user"}},{"name":"Cooldowns","construct":{"name":"Cooldowns","description":"Cooldowns class.","params":[{"name":"userObject","description":"User object from database.","type":[[["RawEconomyUser"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]],"meta":{"line":27,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":34,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"_cooldowns","description":"Cooldowns object.","access":"private","type":[[["CooldownsObject"]]],"meta":{"line":41,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"_rawUser","description":"Raw user object.","access":"private","type":[[["RawEconomyUser"]]],"meta":{"line":52,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"_rewardCooldowns","description":"Cooldowns configuration object.","type":[[["RewardCooldowns"]]],"meta":{"line":58,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}}],"methods":[{"name":"getCooldown","description":"Returns the cooldown of the specified type.","params":[{"name":"type","description":"Cooldown type.","type":[[["daily","'"]],[["work","'"]],[["weekly","'"]]]}],"returns":{"types":[[["Promise","<"],["CooldownData",">"]]],"description":"Cooldown object."},"meta":{"line":72,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"getDaily","description":"Gets a user's daily cooldown.","returns":{"types":[[["Promise","<"],["CooldownData",">"]]],"description":"User's daily cooldown."},"meta":{"line":82,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"getWork","description":"Gets a user's work cooldown.","returns":{"types":[[["Promise","<"],["CooldownData",">"]]],"description":"User's work cooldown."},"meta":{"line":92,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"getWeekly","description":"Gets a user's weekly cooldown.","returns":{"types":[[["Promise","<"],["CooldownData",">"]]],"description":"User's weekly cooldown."},"meta":{"line":102,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"getAll","description":"Gets all user's cooldowns","returns":{"types":[[["Promise","<"],["CooldownsTimeObject",">"]]],"description":"User's cooldowns object."},"meta":{"line":112,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}}],"meta":{"line":21,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"History","description":"User purchases history class.","extends":[[["BaseManager"]]],"construct":{"name":"History","description":"History constructor.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":33,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":39,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":46,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":53,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":63,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","access":"private","type":[[["any"]]],"meta":{"line":96,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"emptyBaseConstructor","description":"An empty constructor (EmptyEconomyUser, EmptyEconomyGuild, etc.) to replace the `undefined` value with.","access":"private","type":[[["any"]]],"meta":{"line":103,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"length","description":"Number of specific element in database.","type":[[["number"]]],"meta":{"line":109,"file":"BaseManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"get","description":"Gets all the items in user's purchases history.\n\nThis method is an alias for `History.all()` method.","returns":{"types":[[["Promise","<"],["Array","<"],["HistoryItem",">>"]]],"description":"User's history item."},"meta":{"line":62,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"all","description":"Gets all the items in user's purchases history.","async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["HistoryItem",">>"]]],"description":"User's purchases history."},"meta":{"line":70,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"add","description":"Adds the item from the shop to the purchases history.","params":[{"name":"itemID","description":"Shop item ID.","type":[[["string"]],[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If added: true, else: false."},"meta":{"line":84,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"remove","description":"Removes the specified item from purchases history.","params":[{"name":"id","description":"History item ID.","type":[[["string"]],[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":121,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"delete","description":"Removes the specified item from purchases history.\n\nThis method is an alias for `History.remove()` method.","params":[{"name":"id","description":"History item ID.","type":[[["string"]],[["number"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":157,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"clear","description":"Clears the user's purchases history.","async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true, else: false."},"meta":{"line":165,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"getItem","description":"Gets the item from user's purchases history.","params":[{"name":"id","description":"History item ID.","type":[[["string"]],[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["HistoryItem",">"]]],"description":"User's history item."},"meta":{"line":185,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"findItem","description":"Gets the specified item from history.\n\nThis method is an alias for `History.getItem()` method.","params":[{"name":"id","description":"History item ID.","type":[[["string"]],[["number"]]]}],"returns":{"types":[[["Promise","<"],["HistoryItem",">"]]],"description":"Purchases history item."},"meta":{"line":197,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"first","description":"Gets the first element in specified guild.","inherits":"BaseManager#first","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"First database object."},"meta":{"line":120,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"last","description":"Gets the last element in specified guild.","inherits":"BaseManager#last","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Last database object."},"meta":{"line":171,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toArray","description":"Returns an array of elements in specified guild.","inherits":"BaseManager#toArray","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Array of elements in specified guild."},"meta":{"line":223,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"find","description":"This method is the same as `Array.find()`.\n\nFinds the element in array and returns it.","inherits":"BaseManager#find","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Database object."},"meta":{"line":278,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"at","description":"Gets the element at the specified index in the elements array.","inherits":"BaseManager#at","inherited":true,"params":[{"name":"index","description":"Index of the user.","type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Object at the specified index."},"meta":{"line":305,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"findIndex","description":"This method is the same as `Array.findIndex()`. \n\nFinds the element's index in array and returns it.","inherits":"BaseManager#findIndex","inherited":true,"params":[{"name":"predicate","description":"Find calls predicate once for each element of the array, in ascending order, \nuntil it finds one where predicate returns true. \nIf such an element is found, findIndex immediately returns that element index. \nOtherwise, findIndex returns -1.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index."},"meta":{"line":364,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"includes","description":"This method is the same as `Array.includes()`. \n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#includes","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The position in this array at which to begin searching for searchElement.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":379,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"has","description":"This method is the same as `Array.includes()`.\n\nThis method is an alias for `UserManager.includes()` method.\n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#has","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":398,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"indexOf","description":"This method is the same as `Array.indexOf()`.","inherits":"BaseManager#indexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":414,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"lastIndexOf","description":"This method is the same as `Array.lastIndexOf()`.","inherits":"BaseManager#lastIndexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin searching backward. \nIf fromIndex is omitted, the search starts at the last index in the array.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":430,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"reverse","description":"This method is the same as `Array.reverse()`. \n\nReverses the array of all elements and returns it.","inherits":"BaseManager#reverse","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Reversed elements array."},"meta":{"line":443,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"sort","description":"This method is the same as `Array.sort()`.\n\nSorts an array in place. This method mutates the array and returns a reference to the same array.","inherits":"BaseManager#sort","inherited":true,"params":[{"name":"compareFn","description":"Function used to determine the order of the elements. \nIt is expected to return a negative value if first argument is less than second argument, \nzero if they're equal and a positive value otherwise. \nIf omitted, the elements are sorted in ascending, ASCII character order.","optional":true,"type":[[["CompareFunction"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Sorted elements array."},"meta":{"line":461,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"filter","description":"This method is the same as `Array.filter()`.\n\nFilters the array by specified condition and returns the array.","inherits":"BaseManager#filter","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":480,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"map","description":"This method is the same as `Array.map()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#map","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":500,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"forEach","description":"This method is the same as `Array.forEach()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#forEach","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":520,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"some","description":"This method is the same as `Array.some()`. \n\nDetermines whether the specified callback function returns true for any element of an array.","inherits":"BaseManager#some","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe some method calls the predicate function for each element in the array\nuntil the predicate returns a value which is coercible to the Boolean value true, \nor until the end of the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is any of the elements meets the specified condition."},"meta":{"line":541,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"values","description":"Returns an iterable of values in the array.","inherits":"BaseManager#values","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["IterableIterator","<"],["any",">>"]]],"description":"An iterable of values in the array."},"meta":{"line":552,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toString","description":"Returns a string representation of an array.","inherits":"BaseManager#toString","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"String representation of an array."},"meta":{"line":563,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":16,"file":"History.js","path":"mongodb/src/classes/user"}},{"name":"Inventory","description":"User inventory class.","extends":[[["BaseManager"]]],"construct":{"name":"Inventory","description":"Inventory constructor.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":33,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":39,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":46,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":53,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":60,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","access":"private","type":[[["any"]]],"meta":{"line":96,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"emptyBaseConstructor","description":"An empty constructor (EmptyEconomyUser, EmptyEconomyGuild, etc.) to replace the `undefined` value with.","access":"private","type":[[["any"]]],"meta":{"line":103,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"length","description":"Number of specific element in database.","type":[[["number"]]],"meta":{"line":109,"file":"BaseManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"get","description":"Gets the item from user's inventory.","params":[{"name":"itemID","description":"Item ID.","type":[[["string"]],[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["InventoryItem",">"]]],"description":"User's inventory item."},"meta":{"line":68,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"all","description":"Gets all the items in user's inventory.\n\nThis method is an alias for 'Inventory.fetch' nethod.","returns":{"types":[[["Promise","<"],["Array","<"],["InventoryItem",">>"]]],"description":"User's inventory array."},"meta":{"line":79,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"use","description":"Uses the item from user's inventory.","params":[{"name":"itemID","description":"Item ID.","type":[[["string"]],[["number"]]]},{"name":"client","description":"Discord Client [Specify if the role will be given in a Discord server].","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Item message or null if item not found."},"meta":{"line":89,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"add","description":"Adds the item from the shop to user's inventory.","params":[{"name":"itemID","description":"Item ID.","type":[[["string"]],[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If added successfully: true, else: false."},"meta":{"line":180,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"removeItem","description":"Removes the item from user's inventory.","params":[{"name":"itemID","description":"Item ID.","type":[[["string"]],[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed successfully: true, else: false."},"meta":{"line":223,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"clear","description":"Clears the user's inventory.","async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true, else: false."},"meta":{"line":249,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"fetch","description":"Fetches the user's inventory.","async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["InventoryItem",">>"]]],"description":"User's inventory array."},"meta":{"line":267,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"findItem","description":"Gets the item from user's inventory.\n\nThis method is an alias for 'Inventory.get()' method.","params":[{"name":"itemID","description":"Item ID.","type":[[["string"]],[["number"]]]}],"returns":{"types":[[["Promise","<"],["InventoryItem",">"]]],"description":"User's inventory item."},"meta":{"line":286,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"first","description":"Gets the first element in specified guild.","inherits":"BaseManager#first","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"First database object."},"meta":{"line":120,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"last","description":"Gets the last element in specified guild.","inherits":"BaseManager#last","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Last database object."},"meta":{"line":171,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toArray","description":"Returns an array of elements in specified guild.","inherits":"BaseManager#toArray","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Array of elements in specified guild."},"meta":{"line":223,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"find","description":"This method is the same as `Array.find()`.\n\nFinds the element in array and returns it.","inherits":"BaseManager#find","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Database object."},"meta":{"line":278,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"at","description":"Gets the element at the specified index in the elements array.","inherits":"BaseManager#at","inherited":true,"params":[{"name":"index","description":"Index of the user.","type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Object at the specified index."},"meta":{"line":305,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"findIndex","description":"This method is the same as `Array.findIndex()`. \n\nFinds the element's index in array and returns it.","inherits":"BaseManager#findIndex","inherited":true,"params":[{"name":"predicate","description":"Find calls predicate once for each element of the array, in ascending order, \nuntil it finds one where predicate returns true. \nIf such an element is found, findIndex immediately returns that element index. \nOtherwise, findIndex returns -1.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index."},"meta":{"line":364,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"includes","description":"This method is the same as `Array.includes()`. \n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#includes","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The position in this array at which to begin searching for searchElement.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":379,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"has","description":"This method is the same as `Array.includes()`.\n\nThis method is an alias for `UserManager.includes()` method.\n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#has","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":398,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"indexOf","description":"This method is the same as `Array.indexOf()`.","inherits":"BaseManager#indexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":414,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"lastIndexOf","description":"This method is the same as `Array.lastIndexOf()`.","inherits":"BaseManager#lastIndexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin searching backward. \nIf fromIndex is omitted, the search starts at the last index in the array.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":430,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"reverse","description":"This method is the same as `Array.reverse()`. \n\nReverses the array of all elements and returns it.","inherits":"BaseManager#reverse","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Reversed elements array."},"meta":{"line":443,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"sort","description":"This method is the same as `Array.sort()`.\n\nSorts an array in place. This method mutates the array and returns a reference to the same array.","inherits":"BaseManager#sort","inherited":true,"params":[{"name":"compareFn","description":"Function used to determine the order of the elements. \nIt is expected to return a negative value if first argument is less than second argument, \nzero if they're equal and a positive value otherwise. \nIf omitted, the elements are sorted in ascending, ASCII character order.","optional":true,"type":[[["CompareFunction"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Sorted elements array."},"meta":{"line":461,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"filter","description":"This method is the same as `Array.filter()`.\n\nFilters the array by specified condition and returns the array.","inherits":"BaseManager#filter","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":480,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"map","description":"This method is the same as `Array.map()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#map","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":500,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"forEach","description":"This method is the same as `Array.forEach()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#forEach","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":520,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"some","description":"This method is the same as `Array.some()`. \n\nDetermines whether the specified callback function returns true for any element of an array.","inherits":"BaseManager#some","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe some method calls the predicate function for each element in the array\nuntil the predicate returns a value which is coercible to the Boolean value true, \nor until the end of the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is any of the elements meets the specified condition."},"meta":{"line":541,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"values","description":"Returns an iterable of values in the array.","inherits":"BaseManager#values","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["IterableIterator","<"],["any",">>"]]],"description":"An iterable of values in the array."},"meta":{"line":552,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toString","description":"Returns a string representation of an array.","inherits":"BaseManager#toString","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"String representation of an array."},"meta":{"line":563,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":16,"file":"Inventory.js","path":"mongodb/src/classes/user"}},{"name":"Items","description":"User Items.","construct":{"name":"Items","description":"User Items.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"ecoOptions","description":"Economy configuratuion.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","access":"private","type":[[["string"]]],"meta":{"line":24,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"guildID","description":"Guild ID.","access":"private","type":[[["string"]]],"meta":{"line":31,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"_shop","description":"Shop Manager.","access":"private","type":[[["ShopManager"]]],"meta":{"line":38,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"_inventory","description":"Inventory Manager.","access":"private","type":[[["InventoryManager"]]],"meta":{"line":45,"file":"Items.js","path":"mongodb/src/classes/user"}}],"methods":[{"name":"buy","description":"Buys the item from the shop.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"quantity","description":"Quantity of items to buy. Default: 1.","optional":true,"default":1,"type":[[["number"]]]},{"name":"reason","description":"The reason why the money was subtracted. Default: 'received the item from the shop'.","optional":true,"default":"'received the item from the shop'","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["ShopOperationInfo",">"]]],"description":"Operation information object."},"meta":{"line":58,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"add","description":"Adds the item from the shop to user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"quantity","description":"Quantity of items to add. Default: 1.","optional":true,"default":1,"type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["ShopOperationInfo",">"]]],"description":"Operation information object."},"meta":{"line":68,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"get","description":"Gets the specified item from the user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["InventoryData",">>"]]],"description":"User's inventory array."},"meta":{"line":77,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"sell","description":"Sells the item from the user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"quantity","description":"Quantity of items to sell. Default: 1.","optional":true,"default":1,"type":[[["number"]]]},{"name":"reason","description":"The reason why the money was added. Default: 'sold the item to the shop'.","optional":true,"default":"'sold the item to the shop'","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["ShopOperationInfo",">"]]],"description":"Selling operation info."},"meta":{"line":91,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"use","description":"Uses the item from user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"client","description":"Discord Client [Specify if the role will be given in a Discord server].","optional":true,"type":[[["Client"]]]}],"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Item message."},"meta":{"line":101,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"remove","description":"Removes the item from user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed successfully: true, else: false."},"meta":{"line":110,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"delete","description":"Removes the item from user's inventory.\n\nThis method is an alias for 'Items.remove' method","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed successfully: true, else: false."},"meta":{"line":121,"file":"Items.js","path":"mongodb/src/classes/user"}}],"meta":{"line":7,"file":"Items.js","path":"mongodb/src/classes/user"}},{"name":"Rewards","description":"User rewards.","construct":{"name":"Rewards","description":"Rewards constructor.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database Manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":30,"file":"Rewards.js","path":"mongodb/src/classes/user"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":36,"file":"Rewards.js","path":"mongodb/src/classes/user"}},{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]],"meta":{"line":42,"file":"Rewards.js","path":"mongodb/src/classes/user"}},{"name":"_rewards","description":"Rewards Manager.","access":"private","type":[[["RewardManager"]]],"meta":{"line":49,"file":"Rewards.js","path":"mongodb/src/classes/user"}}],"methods":[{"name":"receive","description":"Adds a reward on user's balance.","params":[{"name":"reward","description":"Reward to give.","type":[[["RewardType"]]]},{"name":"reason","description":"The reason why the money was added.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["RewardData",">"]]],"description":"Daily reward object."},"meta":{"line":58,"file":"Rewards.js","path":"mongodb/src/classes/user"}},{"name":"getDaily","description":"Adds a daily reward on user's balance.","params":[{"name":"reason","description":"The reason why the money was added. Default: 'claimed the daily reward'","optional":true,"default":"'claimed the daily reward'","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["RewardData",">"]]],"description":"Reward object information."},"meta":{"line":101,"file":"Rewards.js","path":"mongodb/src/classes/user"}},{"name":"getWork","description":"Adds a work reward on user's balance.","params":[{"name":"reason","description":"The reason why the money was added. Default: 'claimed the work reward'","optional":true,"default":"'claimed the work reward'","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["RewardData",">"]]],"description":"Reward object information."},"meta":{"line":112,"file":"Rewards.js","path":"mongodb/src/classes/user"}},{"name":"getWeekly","description":"Adds a weekly reward on user's balance.","params":[{"name":"reason","description":"The reason why the money was added. Default: 'claimed the weekly reward'","optional":true,"default":"'claimed the weekly reward'","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["RewardData",">"]]],"description":"Reward object information."},"meta":{"line":123,"file":"Rewards.js","path":"mongodb/src/classes/user"}}],"meta":{"line":14,"file":"Rewards.js","path":"mongodb/src/classes/user"}},{"name":"EconomyError","description":"EconomyError class.","extends":[[["Error"]]],"construct":{"name":"EconomyError","description":"Creates an 'EconomyError' instance.","params":[{"name":"message","description":"Error message.","type":[[["string"]],[["Error"]]]},{"name":"code","description":"Error code.","type":[[["INVALID_TYPE","'"]],[["INVALID_CACHING_IDENTIFIERS","'"]],[["INVALID_CACHE_ITEM_NAME","'"]],[["UNKNOWN_ERROR","'"]],[["PARAMETER_NOT_SPECIFIED","'"]],[["OLD_NODE_VERSION","'"]],[["NO_DISCORD_CLIENT","'"]],[["ROLE_NOT_FOUND","'"]],[["PURCHASES_HISTORY_DISABLED","'"]],[["SETTINGS_KEY_INVALID","'"]],[["INVALID_ERROR_CODE","'"]],[["NO_CONNECTION_DATA","'"]]]}]},"props":[{"name":"code","description":"Error code.","type":[[["INVALID_TYPE","'"]],[["INVALID_CACHING_IDENTIFIERS","'"]],[["INVALID_CACHE_ITEM_NAME","'"]],[["UNKNOWN_ERROR","'"]],[["PARAMETER_NOT_SPECIFIED","'"]],[["OLD_NODE_VERSION","'"]],[["NO_DISCORD_CLIENT","'"]],[["ROLE_NOT_FOUND","'"]],[["PURCHASES_HISTORY_DISABLED","'"]],[["SETTINGS_KEY_INVALID","'"]],[["INVALID_ERROR_CODE","'"]],[["NO_CONNECTION_DATA","'"]]],"meta":{"line":73,"file":"EconomyError.js","path":"mongodb/src/classes/util"}},{"name":"name","description":"Error name.","type":[[["string"]]],"meta":{"line":79,"file":"EconomyError.js","path":"mongodb/src/classes/util"}}],"meta":{"line":22,"file":"EconomyError.js","path":"mongodb/src/classes/util"}},{"name":"Emitter","description":"Economy event emitter with only important emitter methods.","access":"private","construct":{"name":"Emitter","description":"Economy event emitter with only important emitter methods."},"methods":[{"name":"on","description":"Listens to the event.","params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":12,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"Logger","description":"Economy logger.","access":"private","construct":{"name":"Logger","description":"Logger constructor.","params":[{"name":"options","description":"Logger configuration.","type":[[["LoggerOptions"]]]}]},"props":[{"name":"options","description":"Logger configuration.","type":[[["LoggerOptions"]]],"meta":{"line":17,"file":"Logger.js","path":"mongodb/src/classes/util"}},{"name":"colors","description":"Logger colors object.","type":[[["LoggerColors"]]],"meta":{"line":23,"file":"Logger.js","path":"mongodb/src/classes/util"}}],"methods":[{"name":"info","description":"Sends an info message to the console.","params":[{"name":"message","description":"A message to send.","type":[[["string"]]]},{"name":"color","description":"Message color to use.","optional":true,"default":"'red'","type":[[["string"]]]}],"meta":{"line":50,"file":"Logger.js","path":"mongodb/src/classes/util"}},{"name":"error","description":"Sends an error message to the console.","params":[{"name":"message","description":"A message to send.","type":[[["string"]]]},{"name":"color","description":"Message color to use.","optional":true,"default":"'red'","type":[[["string"]]]}],"meta":{"line":59,"file":"Logger.js","path":"mongodb/src/classes/util"}},{"name":"debug","description":"Sends a debug message to the console.","params":[{"name":"message","description":"A message to send.","type":[[["string"]]]},{"name":"color","description":"Message color to use.","optional":true,"default":"'yellow'","type":[[["string"]]]}],"meta":{"line":68,"file":"Logger.js","path":"mongodb/src/classes/util"}}],"meta":{"line":5,"file":"Logger.js","path":"mongodb/src/classes/util"}},{"name":"BalanceManager","description":"Balance manager methods class.","extends":[[["Emitter"]]],"construct":{"name":"BalanceManager","description":"Balance Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["object"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":30,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":37,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":44,"file":"BalanceManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches the user's balance.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"User's balance"},"meta":{"line":53,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"get","description":"Gets the user's balance.\n\nThis method is an alias of `BalanceManager.fetch()` method.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"User's balance"},"meta":{"line":74,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"set","description":"Sets the money amount on user's balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why you set the money.","default":null,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":86,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"add","description":"Adds the money amount on user's balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why you add the money.","default":null,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":128,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"subtract","description":"Subtracts the money amount on user's balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why you add the money.","default":null,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":170,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"leaderboard","description":"Shows a money leaderboard for your server.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["BalanceLeaderboard",">>"]]],"description":"Sorted leaderboard array."},"meta":{"line":209,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"transfer","description":"Sends the money to a specified user.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Transferring options.","type":[[["TransferringOptions"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["TransferringResult",">"]]],"description":"Transferring result object."},"meta":{"line":237,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":14,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"BankManager","description":"Bank manager methods class.","extends":[[["Emitter"]]],"construct":{"name":"BankManager","description":"Bank Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["object"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":30,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":37,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":44,"file":"BankManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"fetch","description":"Fetches the user's bank balance.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"User's bank balance"},"meta":{"line":53,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"get","description":"Gets the user's bank balance.\n\nThis method is an alias of `BankManager.fetch()` method.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"User's bank balance"},"meta":{"line":74,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"set","description":"Sets the money amount on user's bank balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why you add the money.","default":null,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":86,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"add","description":"Adds the money amount on user's bank balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why you add the money.","default":null,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":128,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"subtract","description":"Subtracts the money amount on user's bank balance.","params":[{"name":"amount","description":"Money amount.","type":[[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why you add the money.","default":null,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Money amount."},"meta":{"line":170,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"leaderboard","description":"Shows a money leaderboard for your server.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["BankLeaderboard",">>"]]],"description":"Sorted leaderboard array."},"meta":{"line":209,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":14,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"BaseManager","description":"The default manager with its default methods.\n\n[!] This manager cannot be used directly.\n\n[!] When extending this manager, make sure to have an `all()` method in your child class.\n\n[!] Make sure to specify your main item class (EconomyUser, ShopItem, etc.) \nin a second argument in super() for a manager to work with.","extends":[[["Emitter"]]],"construct":{"name":"BaseManager","description":"Base Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"constructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","type":[[["any"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]},{"name":"emptyBaseConstructor","description":"An empty constructor (EmptyEconomyUser, EmptyEconomyGuild, etc.) to replace the `undefined` value with.","optional":true,"type":[[["any"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":63,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":70,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":77,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":83,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":89,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","access":"private","type":[[["any"]]],"meta":{"line":96,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"emptyBaseConstructor","description":"An empty constructor (EmptyEconomyUser, EmptyEconomyGuild, etc.) to replace the `undefined` value with.","access":"private","type":[[["any"]]],"meta":{"line":103,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"length","description":"Number of specific element in database.","type":[[["number"]]],"meta":{"line":109,"file":"BaseManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"first","description":"Gets the first element in specified guild.","async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"First database object."},"meta":{"line":120,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"last","description":"Gets the last element in specified guild.","async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Last database object."},"meta":{"line":171,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toArray","description":"Returns an array of elements in specified guild.","async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Array of elements in specified guild."},"meta":{"line":223,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"find","description":"This method is the same as `Array.find()`.\n\nFinds the element in array and returns it.","params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Database object."},"meta":{"line":278,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"at","description":"Gets the element at the specified index in the elements array.","params":[{"name":"index","description":"Index of the user.","type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Object at the specified index."},"meta":{"line":305,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"findIndex","description":"This method is the same as `Array.findIndex()`. \n\nFinds the element's index in array and returns it.","params":[{"name":"predicate","description":"Find calls predicate once for each element of the array, in ascending order, \nuntil it finds one where predicate returns true. \nIf such an element is found, findIndex immediately returns that element index. \nOtherwise, findIndex returns -1.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index."},"meta":{"line":364,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"includes","description":"This method is the same as `Array.includes()`. \n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The position in this array at which to begin searching for searchElement.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":379,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"has","description":"This method is the same as `Array.includes()`.\n\nThis method is an alias for `UserManager.includes()` method.\n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":398,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"indexOf","description":"This method is the same as `Array.indexOf()`.","params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":414,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"lastIndexOf","description":"This method is the same as `Array.lastIndexOf()`.","params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin searching backward. \nIf fromIndex is omitted, the search starts at the last index in the array.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":430,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"reverse","description":"This method is the same as `Array.reverse()`. \n\nReverses the array of all elements and returns it.","async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Reversed elements array."},"meta":{"line":443,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"sort","description":"This method is the same as `Array.sort()`.\n\nSorts an array in place. This method mutates the array and returns a reference to the same array.","params":[{"name":"compareFn","description":"Function used to determine the order of the elements. \nIt is expected to return a negative value if first argument is less than second argument, \nzero if they're equal and a positive value otherwise. \nIf omitted, the elements are sorted in ascending, ASCII character order.","optional":true,"type":[[["CompareFunction"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Sorted elements array."},"meta":{"line":461,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"filter","description":"This method is the same as `Array.filter()`.\n\nFilters the array by specified condition and returns the array.","params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":480,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"map","description":"This method is the same as `Array.map()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":500,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"forEach","description":"This method is the same as `Array.forEach()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":520,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"some","description":"This method is the same as `Array.some()`. \n\nDetermines whether the specified callback function returns true for any element of an array.","params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe some method calls the predicate function for each element in the array\nuntil the predicate returns a value which is coercible to the Boolean value true, \nor until the end of the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is any of the elements meets the specified condition."},"meta":{"line":541,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"values","description":"Returns an iterable of values in the array.","async":true,"returns":{"types":[[["Promise","<"],["IterableIterator","<"],["any",">>"]]],"description":"An iterable of values in the array."},"meta":{"line":552,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toString","description":"Returns a string representation of an array.","async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"String representation of an array."},"meta":{"line":563,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":38,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"CacheManager","description":"Economy Cache manager.","construct":{"name":"CacheManager","description":"Economy Cache manager.","params":[{"name":"options","description":"Economy configuration object.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager instance.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"guilds","description":"Cached guilds.","type":[[["CachedGuilds"]]],"meta":{"line":33,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"users","description":"Cached users.","type":[[["CachedUsers"]]],"meta":{"line":39,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"balance","description":"Cached balance.","type":[[["CachedBalance"]]],"meta":{"line":45,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"bank","description":"Cached bank balance.","type":[[["CachedBank"]]],"meta":{"line":51,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"cooldowns","description":"Cached cooldowns.","type":[[["CachedCooldowns"]]],"meta":{"line":57,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"shop","description":"Cached shop.","type":[[["CachedShop"]]],"meta":{"line":63,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"history","description":"Cached history.","type":[[["CachedHistory"]]],"meta":{"line":69,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"inventory","description":"Cached inventory.","type":[[["CachedInventory"]]],"meta":{"line":75,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"_database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":82,"file":"CacheManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"updateAll","description":"Updates all the cached items.","params":[{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":90,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"clearAll","description":"Clears all the cache in all cached items.","returns":[[["void"]]],"meta":{"line":113,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"updateSpecified","description":"Updates the specified cached items.","params":[{"name":"cacheItemNames","description":"Names of the cache items to update.","type":[[["Array","<"],["CacheItemName",">"]]]},{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":136,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"updateMany","description":"Updates the specified cached items.\n\nThis method is an alias for `CacheManager.updateSpecified()` method.","params":[{"name":"cacheItemNames","description":"Names of the cache items to update.","type":[[["Array","<"],["CacheItemName",">"]]]},{"name":"id","description":"Identifiers object (memberID, guildID) to get value from cache.","type":[[["DataIdentifier"]]]}],"returns":[[["Promise","<"],["Array","<"],["void",">>"]]],"meta":{"line":161,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"clearSpecified","description":"Clears the specified cached items.","params":[{"name":"cacheItemNames","description":"Names of the cache items to clear.","type":[[["Array","<"],["CacheItemName",">"]]]}],"returns":[[["void"]]],"meta":{"line":172,"file":"CacheManager.js","path":"mongodb/src/managers"}}],"meta":{"line":20,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"CooldownManager","description":"Cooldown manager methods class.","construct":{"name":"CooldownManager","description":"Cooldown Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["object"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":28,"file":"CooldownManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":35,"file":"CooldownManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":42,"file":"CooldownManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"getDaily","description":"Gets a user's daily cooldown.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Cooldown end timestamp"},"meta":{"line":51,"file":"CooldownManager.js","path":"mongodb/src/managers"}},{"name":"getWork","description":"Gets a user's work cooldown.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Cooldown end timestamp"},"meta":{"line":70,"file":"CooldownManager.js","path":"mongodb/src/managers"}},{"name":"getWeekly","description":"Gets a user's daily cooldown.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Cooldown end timestamp"},"meta":{"line":89,"file":"CooldownManager.js","path":"mongodb/src/managers"}},{"name":"clearDaily","description":"Clears user's daily cooldown.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false"},"meta":{"line":108,"file":"CooldownManager.js","path":"mongodb/src/managers"}},{"name":"clearWork","description":"Clears user's work cooldown.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false"},"meta":{"line":127,"file":"CooldownManager.js","path":"mongodb/src/managers"}},{"name":"clearWeekly","description":"Clears user's weekly cooldown.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false"},"meta":{"line":146,"file":"CooldownManager.js","path":"mongodb/src/managers"}}],"meta":{"line":12,"file":"CooldownManager.js","path":"mongodb/src/managers"}},{"name":"DatabaseManager","description":"Database manager methods class.","construct":{"name":"DatabaseManager","description":"Database Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["object"]]]},{"name":"mongo","description":"QuickMongo instance.","type":[[["QuickMongo"]]]}]},"props":[{"name":"_logger","description":"Economy Logger.","access":"private","type":[[["Logger"]]],"meta":{"line":23,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"_mongo","description":"QuickMongo instance.","access":"private","type":[[["QuickMongo"]]],"meta":{"line":30,"file":"DatabaseManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"keysList","description":"Gets a list of keys in database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["String",">>"]]],"description":"An array with all keys in database or 'null' if nothing found."},"meta":{"line":38,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"set","description":"Sets data in a property in database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]},{"name":"value","description":"Any data to set in property.","type":[[["any"]]]},{"name":"debug","description":"If true, debug log will be sent.","optional":true,"default":false,"type":[[["boolean"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If set successfully: true; else: false"},"meta":{"line":49,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"add","description":"Adds a number to a property data in database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]},{"name":"value","description":"Any number to add.","type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If added successfully: true; else: false"},"meta":{"line":61,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"subtract","description":"Subtracts a number from a property data in database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]},{"name":"value","description":"Any number to subtract.","type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If set successfully: true; else: false"},"meta":{"line":73,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"fetch","description":"Fetches the data from the database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Value from the specified key or 'false' if failed to read or 'null' if nothing found."},"meta":{"line":84,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"get","description":"Fetches the data from the database.\n\nThis method is an alias for 'DatabaseManager.fetch()' method.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Value from the specified key or 'false' if failed to read or 'null' if nothing found."},"meta":{"line":95,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"find","description":"Fetches the data from the database.\n\nThis method is an alias for the `DatabaseManager.fetch()` method.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Value from the specified key or 'false' if failed to read or 'null' if nothing found."},"meta":{"line":106,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"remove","description":"Removes the property from the existing object in database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":115,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"delete","description":"Removes the property from the existing object in database.\n\nThis method is an alias for `DatabaseManager.remove()` method.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":128,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"clear","description":"Clears the whole database.","async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":136,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"deleteAll","description":"Clears the whole database.\n\nThis method is an alias for `DatabaseManager.clear()` method.","returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":153,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"push","description":"Pushes a value to a specified array from the database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]},{"name":"value","description":"The key in database.","type":[[["any"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":163,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"pop","description":"Removes an element from a specified array in the database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]},{"name":"index","description":"The index in the array.","type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":175,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"removeElement","description":"Removes an element from a specified array in the database.\n\nThis method is an alias for `DatabaseManager.pop()` method.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]},{"name":"index","description":"The index in the array.","type":[[["number"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":189,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"pull","description":"Changes the specified element's value in a specified array in the database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]},{"name":"index","description":"The index in the array.","type":[[["number"]]]},{"name":"newValue","description":"The new value to set.","type":[[["any"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":200,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"changeElement","description":"Changes the specified element's value in a specified array in the database.\n\nThis method is an alias for `DatabaseManager.pull()` method.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]},{"name":"index","description":"The index in the array.","type":[[["number"]]]},{"name":"newValue","description":"The new value to set.","type":[[["any"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true; else: false."},"meta":{"line":215,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"has","description":"Checks if the element is existing in database.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If existing: true; else: false."},"meta":{"line":224,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"includes","description":"Checks if the element is existing in database.\n\nThis method is an alias for `DatabaseManager.has()` method.","params":[{"name":"key","description":"The key in database.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If existing: true; else: false."},"meta":{"line":235,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"all","description":"Fetches the entire database.","returns":{"types":[[["Promise","<"],["DatabaseProperties",">"]]],"description":"Database contents"},"meta":{"line":243,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"raw","description":"Fetches the raw content of database.","returns":{"types":[[["Promise","<"],["Array","<"],["DatabaseObject",">>"]]],"description":"Database contents"},"meta":{"line":251,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"ping","description":"Sends a read, write and delete requests to the database and returns the request latencies.","returns":{"types":[[["Promise","<"],["MongoLatencyData",">"]]],"description":"Database latency object."},"meta":{"line":259,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"connect","description":"Connects to the database.","returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If connected - MongoDB collection will be returned."},"meta":{"line":267,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"disconnect","description":"Closes the connection.","returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If closed, true will be returned."},"meta":{"line":275,"file":"DatabaseManager.js","path":"mongodb/src/managers"}}],"meta":{"line":9,"file":"DatabaseManager.js","path":"mongodb/src/managers"}},{"name":"GuildManager","description":"User manager methods class.","extends":[[["BaseManager"]]],"construct":{"name":"GuildManager","description":"Guild Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":37,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":44,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"_users","description":"User Manager.","access":"private","type":[[["UserManager"]]],"meta":{"line":51,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"utils","description":"Utils Manager.","access":"private","type":[[["UtilsManager"]]],"meta":{"line":58,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":65,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":83,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":89,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","access":"private","type":[[["any"]]],"meta":{"line":96,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"emptyBaseConstructor","description":"An empty constructor (EmptyEconomyUser, EmptyEconomyGuild, etc.) to replace the `undefined` value with.","access":"private","type":[[["any"]]],"meta":{"line":103,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"length","description":"Number of specific element in database.","type":[[["number"]]],"meta":{"line":109,"file":"BaseManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"get","description":"Gets the guild by it's ID.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["EconomyGuild",">"]]],"description":"Guild object."},"meta":{"line":73,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"create","description":"Creates an economy guild object in database.","params":[{"name":"guildID","description":"The guild ID to set.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["EconomyGuild",">"]]],"description":"New guild instance."},"meta":{"line":85,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"reset","description":"Resets the guild in database.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["EconomyGuild",">"]]],"description":"New guild instance."},"meta":{"line":94,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"all","description":"Gets the array of all guilds in database.","async":true,"returns":[[["Promise","<"],["Array","<"],["EconomyGuild",">>"]]],"meta":{"line":115,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"first","description":"Gets the first element in specified guild.","inherits":"BaseManager#first","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"First database object."},"meta":{"line":120,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"last","description":"Gets the last element in specified guild.","inherits":"BaseManager#last","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Last database object."},"meta":{"line":171,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toArray","description":"Returns an array of elements in specified guild.","inherits":"BaseManager#toArray","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Array of elements in specified guild."},"meta":{"line":223,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"find","description":"This method is the same as `Array.find()`.\n\nFinds the element in array and returns it.","inherits":"BaseManager#find","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Database object."},"meta":{"line":278,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"at","description":"Gets the element at the specified index in the elements array.","inherits":"BaseManager#at","inherited":true,"params":[{"name":"index","description":"Index of the user.","type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Object at the specified index."},"meta":{"line":305,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"findIndex","description":"This method is the same as `Array.findIndex()`. \n\nFinds the element's index in array and returns it.","inherits":"BaseManager#findIndex","inherited":true,"params":[{"name":"predicate","description":"Find calls predicate once for each element of the array, in ascending order, \nuntil it finds one where predicate returns true. \nIf such an element is found, findIndex immediately returns that element index. \nOtherwise, findIndex returns -1.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index."},"meta":{"line":364,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"includes","description":"This method is the same as `Array.includes()`. \n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#includes","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The position in this array at which to begin searching for searchElement.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":379,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"has","description":"This method is the same as `Array.includes()`.\n\nThis method is an alias for `UserManager.includes()` method.\n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#has","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":398,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"indexOf","description":"This method is the same as `Array.indexOf()`.","inherits":"BaseManager#indexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":414,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"lastIndexOf","description":"This method is the same as `Array.lastIndexOf()`.","inherits":"BaseManager#lastIndexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin searching backward. \nIf fromIndex is omitted, the search starts at the last index in the array.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":430,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"reverse","description":"This method is the same as `Array.reverse()`. \n\nReverses the array of all elements and returns it.","inherits":"BaseManager#reverse","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Reversed elements array."},"meta":{"line":443,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"sort","description":"This method is the same as `Array.sort()`.\n\nSorts an array in place. This method mutates the array and returns a reference to the same array.","inherits":"BaseManager#sort","inherited":true,"params":[{"name":"compareFn","description":"Function used to determine the order of the elements. \nIt is expected to return a negative value if first argument is less than second argument, \nzero if they're equal and a positive value otherwise. \nIf omitted, the elements are sorted in ascending, ASCII character order.","optional":true,"type":[[["CompareFunction"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Sorted elements array."},"meta":{"line":461,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"filter","description":"This method is the same as `Array.filter()`.\n\nFilters the array by specified condition and returns the array.","inherits":"BaseManager#filter","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":480,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"map","description":"This method is the same as `Array.map()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#map","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":500,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"forEach","description":"This method is the same as `Array.forEach()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#forEach","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":520,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"some","description":"This method is the same as `Array.some()`. \n\nDetermines whether the specified callback function returns true for any element of an array.","inherits":"BaseManager#some","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe some method calls the predicate function for each element in the array\nuntil the predicate returns a value which is coercible to the Boolean value true, \nor until the end of the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is any of the elements meets the specified condition."},"meta":{"line":541,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"values","description":"Returns an iterable of values in the array.","inherits":"BaseManager#values","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["IterableIterator","<"],["any",">>"]]],"description":"An iterable of values in the array."},"meta":{"line":552,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toString","description":"Returns a string representation of an array.","inherits":"BaseManager#toString","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"String representation of an array."},"meta":{"line":563,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":21,"file":"GuildManager.js","path":"mongodb/src/managers"}},{"name":"HistoryManager","description":"History manager methods class.","construct":{"name":"HistoryManager","description":"History Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["object"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":27,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":34,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":41,"file":"HistoryManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"fetch","description":"Shows the user's purchases history.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["HistoryItem",">>"]]],"description":"User's purchases history."},"meta":{"line":50,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"get","description":"Shows the user's purchases history.\n\nThis method is an alias for `HistoryManager.fetch()` method.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["HistoryItem",">>"]]],"description":"User's purchases history."},"meta":{"line":79,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"clear","description":"Clears the user's purchases history.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true, else: false."},"meta":{"line":89,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"add","description":"Adds the item from the shop to the purchases history.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"quantity","description":"Quantity of the item.","optional":true,"default":1,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If added: true, else: false."},"meta":{"line":120,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"remove","description":"Removes the specified item from purchases history.","params":[{"name":"id","description":"History item ID.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":171,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"findItem","description":"Gets the specified item from history.","params":[{"name":"id","description":"History item ID.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["HistoryItem",">"]]],"description":"Purchases history item."},"meta":{"line":215,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"getItem","description":"Gets the specified item from history.\n\nThis method is an alias for `HistoryManager.findItem()` method.","params":[{"name":"id","description":"History item ID.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["HistoryItem",">"]]],"description":"Purchases history item."},"meta":{"line":244,"file":"HistoryManager.js","path":"mongodb/src/managers"}}],"meta":{"line":13,"file":"HistoryManager.js","path":"mongodb/src/managers"}},{"name":"InventoryManager","description":"Inventory manager methods class.","extends":[[["Emitter"]]],"construct":{"name":"InventoryManager","description":"Inventory Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","nullable":true,"type":[[["EconomyOptions"]]],"meta":{"line":33,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database manager methods object.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":40,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"balance","description":"Balance manager methods object.","access":"private","type":[[["BalanceManager"]]],"meta":{"line":47,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":54,"file":"InventoryManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"clear","description":"Clears the user's inventory.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true, else: false."},"meta":{"line":63,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"getItem","description":"Gets the item in the inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["InventoryItem",">"]]],"description":"If item not found: null; else: item info object."},"meta":{"line":93,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"findItem","description":"Gets the item in the inventory.\n\nThis method is an alias for the `InventoryManager.getItem()` method.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["InventoryItem",">"]]],"description":"If item not found: null; else: item info object."},"meta":{"line":126,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"fetch","description":"Fetches the user's inventory.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["InventoryItem",">>"]]],"description":"User's inventory array."},"meta":{"line":136,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"get","description":"Fetches the user's inventory.\n\nThis method is an alias for the `InventoryManager.fetch()` method.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["InventoryItem",">>"]]],"description":"User's inventory array."},"meta":{"line":160,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"useItem","description":"Uses the item from user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"client","description":"Discord Client [Specify if the role will be given in a Discord server].","optional":true,"type":[[["Client"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Item message."},"meta":{"line":172,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"use","description":"Uses the item from user's inventory.\n\nThis method is an alias for the `InventoryManager.useItem()` method.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"client","description":"The Discord Client. [Specify if the role will be given in a Discord server].","optional":true,"type":[[["Client"]]]}],"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"Item message."},"meta":{"line":280,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"removeItem","description":"Removes the item from user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"quantity","description":"Quantity of items to remove.","optional":true,"default":1,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed successfully: true, else: false."},"meta":{"line":292,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"addItem","description":"Adds the item from the shop to user's inventory.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"quantity","description":"Quantity of items to add.","optional":true,"default":1,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["ShopOperationInfo",">"]]],"description":"Shop operation info."},"meta":{"line":340,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"sellItem","description":"Removes the item from user's inventory\nand adds its price to the user's balance.\nThis is the same as selling something.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"quantity","description":"Quantity of items to sell.","optional":true,"default":1,"type":[[["number"]]]},{"name":"reason","description":"The reason why the item was sold.","optional":true,"default":"'sold the item from the inventory'","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["ShopOperationInfo",">"]]],"description":"Selling operation info."},"meta":{"line":420,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"sell","description":"Removes the item from user's inventory\nand adds its price to the user's balance.\nThis is the same as selling something.\n\nThis method is an alias for 'InventoryManager.sellItem()' method.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"quantity","description":"Quantity of items to sell.","optional":true,"default":1,"type":[[["number"]]]},{"name":"reason","description":"The reason why the item was sold.","optional":true,"default":"'sold the item from the inventory'","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["ShopOperationInfo",">"]]],"description":"Selling operation info."},"meta":{"line":491,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":17,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"RewardManager","description":"Reward manager methods class.","construct":{"name":"RewardManager","description":"Reward Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["object"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":45,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":52,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"cooldowns","description":"Cooldown manager.","access":"private","type":[[["CooldownManager"]]],"meta":{"line":59,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"balance","description":"Balance manager.","access":"private","type":[[["BalanceManager"]]],"meta":{"line":66,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":73,"file":"RewardManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"receive","description":"Adds a reward on user's balance.","params":[{"name":"reward","description":"Reward to give.","type":[[["RewardType"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why the money was added.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["RewardData",">"]]],"description":"Daily reward object."},"meta":{"line":84,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"getDaily","description":"Adds a daily reward on user's balance.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why the money was added. Default: 'claimed the daily reward'.","default":"claimed the daily reward","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["RewardData",">"]]],"description":"Daily reward object."},"meta":{"line":127,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"getWork","description":"Adds a work reward on user's balance.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why the money was added. Default: 'claimed the work reward'.","default":"claimed the work reward","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["RewardData",">"]]],"description":"Work reward object."},"meta":{"line":201,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"getWeekly","description":"Adds a weekly reward on user's balance.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"reason","description":"The reason why the money was added. Default: 'claimed the weekly reward'.","default":"claimed the weekly reward","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["RewardData",">"]]],"description":"Weekly reward object."},"meta":{"line":273,"file":"RewardManager.js","path":"mongodb/src/managers"}}],"meta":{"line":30,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"SettingsManager","description":"Settings manager class.","construct":{"name":"SettingsManager","description":"Settings Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":130,"file":"SettingsManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database manager methods object.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":138,"file":"SettingsManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"get","description":"Gets the specified setting from the database.\n\nNote: If the server don't have any setting specified,\nthe module will take the values from the\nconfiguration or default configuration.","params":[{"name":"key","description":"The setting to fetch.","type":[[["Settings"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"The setting from the database."},"meta":{"line":152,"file":"SettingsManager.js","path":"mongodb/src/managers"}},{"name":"set","description":"Changes the specified setting.\n\nNote: If the server don't have any setting specified, \nthe module will take the values from the \nspecified configuration or default configuration.","params":[{"name":"key","description":"The setting to change.","type":[[["Settings"]]]},{"name":"value","description":"The value to set.","type":[[["any"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["SettingsTypes",">"]]],"description":"The server settings object."},"meta":{"line":179,"file":"SettingsManager.js","path":"mongodb/src/managers"}},{"name":"remove","description":"Removes the specified setting.\n\nNote: If the server don't have any setting specified, \nthe module will take the values from the \nspecified configuration or default configuration.","params":[{"name":"key","description":"The setting to remove.","type":[[["Settings"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["SettingsTypes",">"]]],"description":"The server settings object."},"meta":{"line":214,"file":"SettingsManager.js","path":"mongodb/src/managers"}},{"name":"all","description":"Fetches all the server's settings object.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["SettingsTypes",">"]]],"description":"The server settings object."},"meta":{"line":238,"file":"SettingsManager.js","path":"mongodb/src/managers"}},{"name":"reset","description":"Resets all the settings to setting that are in configuration.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["SettingsTypes",">"]]],"description":"The server settings object."},"meta":{"line":268,"file":"SettingsManager.js","path":"mongodb/src/managers"}}],"meta":{"line":115,"file":"SettingsManager.js","path":"mongodb/src/managers"}},{"name":"ShopManager","description":"Shop manager methods class.","extends":[[["Emitter"]]],"construct":{"name":"ShopManager","description":"Shop Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache Manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","nullable":true,"type":[[["EconomyOptions"]]],"meta":{"line":31,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database manager methods object.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":38,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":45,"file":"ShopManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"addItem","description":"Creates an item in shop.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Configuration with item info.","type":[[["AddItemOptions"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["ShopItem",">"]]],"description":"Item info."},"meta":{"line":54,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"add","description":"Creates an item in shop.\n\nThis method is an alias for the `ShopManager.addItem()` method.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"options","description":"Configuration with item info.","type":[[["AddItemOptions"]]]}],"returns":{"types":[[["Promise","<"],["ShopItem",">"]]],"description":"Item info."},"meta":{"line":146,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"editItem","description":"Edits the item in the shop.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]},{"name":"itemProperty","description":"This argument means what thing in item you want to edit (item property). \nAvailable item properties are 'description', 'price', 'name', 'message', 'amount', 'role', 'custom'.","type":[[["description","'"]],[["price","'"]],[["name","'"]],[["message","'"]],[["maxAmount","'"]],[["role","'"]],[["custom","'"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If edited successfully: true, else: false."},"meta":{"line":160,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"edit","description":"Edits the item in the shop.\n\nThis method is an alias for the `ShopManager.editItem()` method.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]},{"name":"itemProperty","description":"This argument means what thing in item you want to edit (item property). \nAvailable item properties are 'description', 'price', 'name', 'message', 'amount', 'role', 'custom'.","type":[[["description","'"]],[["price","'"]],[["name","'"]],[["message","'"]],[["maxAmount","'"]],[["role","'"]],[["custom","'"]]]},{"name":"value","description":"Any value to set.","type":[[["any"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If edited successfully: true, else: false."},"meta":{"line":250,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"setCustom","description":"Sets a custom object for the item.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["string"]],[["number"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"custom","description":"Custom item data object.","type":[[["object"]]]}],"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If set successfully: true, else: false."},"meta":{"line":261,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"removeItem","description":"Removes an item from the shop.","params":[{"name":"itemID","description":"Item ID or name .","type":[[["number"]],[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If removed: true, else: false."},"meta":{"line":271,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"clear","description":"Clears the shop.","params":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared: true, else: false."},"meta":{"line":315,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"fetch","description":"Shows all items in the shop.","params":[{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["ShopItem",">>"]]],"description":"The shop array."},"meta":{"line":342,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"get","description":"Shows all items in the shop.\n\nThis method is an alias for the `ShopManager.fetch()` method.","params":[{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["ShopItem",">>"]]],"description":"The shop array."},"meta":{"line":361,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"all","description":"Shows all items in the shop.\n\nThis method is an alias for the `ShopManager.get()` method.","params":[{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["Array","<"],["ShopItem",">>"]]],"description":"The shop array."},"meta":{"line":372,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"getItem","description":"Gets the item in the shop.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["ShopItem",">"]]],"description":"If item not found: null; else: item info object."},"meta":{"line":382,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"findItem","description":"Gets the item in the shop.\n\nThis method is an alias for the `ShopManager.getItem()` method.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["ShopItem",">"]]],"description":"If item not found: null; else: item info object."},"meta":{"line":410,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"buy","description":"Buys the item from the shop.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"quantity","description":"Quantity of items to buy. Default: 1.","optional":true,"default":1,"type":[[["number"]]]},{"name":"reason","description":"The reason why the money was subtracted. Default: 'received the item from the shop'.","optional":true,"default":"'received the item from the shop'","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["ShopOperationInfo",">"]]],"description":"Operation information object."},"meta":{"line":426,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"buyItem","description":"Buys the item from the shop.\n\nThis method is an alias for the `ShopManager.buy()` method.","params":[{"name":"itemID","description":"Item ID or name.","type":[[["number"]],[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"quantity","description":"Quantity of items to buy. Default: 1.","optional":true,"default":1,"type":[[["number"]]]},{"name":"reason","description":"The reason why the money was subtracted. Default: 'received the item from the shop'.","optional":true,"default":"'received the item from the shop'","type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["ShopOperationInfo",">"]]],"description":"Operation information object."},"meta":{"line":576,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":15,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"UserManager","description":"User manager methods class.","extends":[[["BaseManager"]]],"construct":{"name":"UserManager","description":"User Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["EconomyOptions"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","type":[[["EconomyOptions"]]],"meta":{"line":33,"file":"UserManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database Manager.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":40,"file":"UserManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":47,"file":"UserManager.js","path":"mongodb/src/managers"}},{"name":"memberID","description":"Member ID.","type":[[["string"]]],"meta":{"line":83,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"guildID","description":"Guild ID.","type":[[["string"]]],"meta":{"line":89,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"baseConstructor","description":"A constructor (EconomyUser, ShopItem, etc.) to work with.","access":"private","type":[[["any"]]],"meta":{"line":96,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"emptyBaseConstructor","description":"An empty constructor (EmptyEconomyUser, EmptyEconomyGuild, etc.) to replace the `undefined` value with.","access":"private","type":[[["any"]]],"meta":{"line":103,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"length","description":"Number of specific element in database.","type":[[["number"]]],"meta":{"line":109,"file":"BaseManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"get","description":"Gets the user by it's ID and guild ID.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["EconomyUser",">"]]],"description":"User object."},"meta":{"line":56,"file":"UserManager.js","path":"mongodb/src/managers"}},{"name":"create","description":"Creates an economy user object in database.","params":[{"name":"memberID","description":"The user ID to set.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","optional":true,"type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["EconomyUser",">"]]],"description":"Economy user object."},"meta":{"line":69,"file":"UserManager.js","path":"mongodb/src/managers"}},{"name":"reset","description":"Sets the default user object for a specified member.","params":[{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","optional":true,"type":[[["string"]]]}],"returns":{"types":[[["Promise","<"],["EconomyUser",">"]]],"description":"If reset successfully: true; else: false."},"meta":{"line":95,"file":"UserManager.js","path":"mongodb/src/managers"}},{"name":"all","description":"Gets the array of all users in database.","async":true,"returns":[[["Promise","<"],["Array","<"],["EconomyUser",">>"]]],"meta":{"line":103,"file":"UserManager.js","path":"mongodb/src/managers"}},{"name":"first","description":"Gets the first element in specified guild.","inherits":"BaseManager#first","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"First database object."},"meta":{"line":120,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"last","description":"Gets the last element in specified guild.","inherits":"BaseManager#last","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Last database object."},"meta":{"line":171,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toArray","description":"Returns an array of elements in specified guild.","inherits":"BaseManager#toArray","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Array of elements in specified guild."},"meta":{"line":223,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"find","description":"This method is the same as `Array.find()`.\n\nFinds the element in array and returns it.","inherits":"BaseManager#find","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Database object."},"meta":{"line":278,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"at","description":"Gets the element at the specified index in the elements array.","inherits":"BaseManager#at","inherited":true,"params":[{"name":"index","description":"Index of the user.","type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["any",">"]]],"description":"Object at the specified index."},"meta":{"line":305,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"findIndex","description":"This method is the same as `Array.findIndex()`. \n\nFinds the element's index in array and returns it.","inherits":"BaseManager#findIndex","inherited":true,"params":[{"name":"predicate","description":"Find calls predicate once for each element of the array, in ascending order, \nuntil it finds one where predicate returns true. \nIf such an element is found, findIndex immediately returns that element index. \nOtherwise, findIndex returns -1.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index."},"meta":{"line":364,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"includes","description":"This method is the same as `Array.includes()`. \n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#includes","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The position in this array at which to begin searching for searchElement.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":379,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"has","description":"This method is the same as `Array.includes()`.\n\nThis method is an alias for `UserManager.includes()` method.\n\nDetermines whether an array includes a certain element, returning true or false as appropriate.","inherits":"BaseManager#has","inherited":true,"params":[{"name":"searchElement","description":"The element to search for.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is the specified element included or not."},"meta":{"line":398,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"indexOf","description":"This method is the same as `Array.indexOf()`.","inherits":"BaseManager#indexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin the search. \nIf fromIndex is omitted, the search starts at index 0.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":414,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"lastIndexOf","description":"This method is the same as `Array.lastIndexOf()`.","inherits":"BaseManager#lastIndexOf","inherited":true,"params":[{"name":"searchElement","description":"The value to locate in the array.","type":[[["any"]]]},{"name":"fromIndex","description":"The array index at which to begin searching backward. \nIf fromIndex is omitted, the search starts at the last index in the array.","optional":true,"type":[[["number"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["number",">"]]],"description":"Element index in the array."},"meta":{"line":430,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"reverse","description":"This method is the same as `Array.reverse()`. \n\nReverses the array of all elements and returns it.","inherits":"BaseManager#reverse","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Reversed elements array."},"meta":{"line":443,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"sort","description":"This method is the same as `Array.sort()`.\n\nSorts an array in place. This method mutates the array and returns a reference to the same array.","inherits":"BaseManager#sort","inherited":true,"params":[{"name":"compareFn","description":"Function used to determine the order of the elements. \nIt is expected to return a negative value if first argument is less than second argument, \nzero if they're equal and a positive value otherwise. \nIf omitted, the elements are sorted in ascending, ASCII character order.","optional":true,"type":[[["CompareFunction"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["Array","<"],["any",">>"]]],"description":"Sorted elements array."},"meta":{"line":461,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"filter","description":"This method is the same as `Array.filter()`.\n\nFilters the array by specified condition and returns the array.","inherits":"BaseManager#filter","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe filter method calls the predicate function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["Array","<"],["any",">>"]]],"meta":{"line":480,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"map","description":"This method is the same as `Array.map()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#map","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":500,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"forEach","description":"This method is the same as `Array.forEach()`. \n\nCalls a defined callback function on each element of an array, \nand returns an array that contains the results.","inherits":"BaseManager#forEach","inherited":true,"params":[{"name":"callbackfn","description":"A function that accepts up to three arguments. \nThe map method calls the callbackfn function one time for each element in the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":520,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"some","description":"This method is the same as `Array.some()`. \n\nDetermines whether the specified callback function returns true for any element of an array.","inherits":"BaseManager#some","inherited":true,"params":[{"name":"predicate","description":"A function that accepts up to three arguments. \nThe some method calls the predicate function for each element in the array\nuntil the predicate returns a value which is coercible to the Boolean value true, \nor until the end of the array.","type":[[["PredicateFunction"]]]},{"name":"thisArg","description":"An object to which the this keyword can refer in the callbackfn function. \nIf thisArg is omitted, undefined is used as the this value.","optional":true,"type":[[["any"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"Is any of the elements meets the specified condition."},"meta":{"line":541,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"values","description":"Returns an iterable of values in the array.","inherits":"BaseManager#values","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["IterableIterator","<"],["any",">>"]]],"description":"An iterable of values in the array."},"meta":{"line":552,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"toString","description":"Returns a string representation of an array.","inherits":"BaseManager#toString","inherited":true,"async":true,"returns":{"types":[[["Promise","<"],["string",">"]]],"description":"String representation of an array."},"meta":{"line":563,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"on","description":"Listens to the event.","inherits":"Emitter#on","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":27,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"once","description":"Listens to the event only for once.","inherits":"Emitter#once","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["ShopEvents"]]]},{"name":"listener","description":"Callback function.","type":[[["function"]]]}],"returns":{"types":[[["Emitter"]]],"description":"Economy Emitter."},"meta":{"line":38,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"emit","description":"Emits the event.","inherits":"Emitter#emit","inherited":true,"params":[{"name":"event","description":"Event name.","type":[[["EconomyEvents"]]]},{"name":"data","description":"Any data to send.","type":[[["any"]]]}],"returns":{"types":[[["boolean"]]],"description":"If emitted: true; else: false."},"meta":{"line":49,"file":"Emitter.js","path":"mongodb/src/classes/util"}}],"meta":{"line":16,"file":"UserManager.js","path":"mongodb/src/managers"}},{"name":"UtilsManager","description":"Utils manager methods class.","construct":{"name":"UtilsManager","description":"Utils Manager.","params":[{"name":"options","description":"Economy configuration.","type":[[["object"]]]},{"name":"database","description":"Database manager.","type":[[["DatabaseManager"]]]},{"name":"cache","description":"Cache manager.","type":[[["CacheManager"]]]}]},"props":[{"name":"options","description":"Economy configuration.","access":"private","nullable":true,"type":[[["EconomyOptions"]]],"meta":{"line":62,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"_logger","description":"Economy Logger.","access":"private","type":[[["Logger"]]],"meta":{"line":69,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"database","description":"Database manager methods object.","access":"private","type":[[["DatabaseManager"]]],"meta":{"line":76,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"cache","description":"Cache Manager.","access":"private","type":[[["CacheManager"]]],"meta":{"line":83,"file":"UtilsManager.js","path":"mongodb/src/managers"}}],"methods":[{"name":"checkUpdates","description":"Checks for the module updates.","async":true,"returns":{"types":[[["Promise","<"],["VersionData",">"]]],"description":"Is the module updated, latest version and installed version."},"meta":{"line":90,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"all","description":"Fetches the entire database.","returns":{"types":[[["Promise","<"],["DatabaseProperties",">"]]],"description":"Database contents"},"meta":{"line":113,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"clearDatabase","description":"Clears the database.","async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared successfully: true."},"meta":{"line":121,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"removeGuild","description":"Fully removes the guild from database.","params":[{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared successfully: true; else: false"},"meta":{"line":137,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"removeUser","description":"Removes the user from database.","params":[{"name":"memberID","description":"Member ID","type":[[["string"]]]},{"name":"guildID","description":"Guild ID","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["boolean",">"]]],"description":"If cleared successfully: true; else: false"},"meta":{"line":158,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"resetUser","description":"Sets the default user object for the specified member.","params":[{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"async":true,"returns":{"types":[[["Promise","<"],["EconomyUser",">"]]],"description":"If reset successfully: new user object."},"meta":{"line":182,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"checkOptions","description":"Checks the Economy configuration, fixes the problems and returns it.","params":[{"name":"options","description":"Option checker options.","type":[[["CheckerOptions"]]]},{"name":"ecoOptions","description":"Economy configuration to check.","type":[[["EconomyOptions"]]]}],"returns":{"types":[[["EconomyOptions"]]],"description":"Fixed Economy configuration."},"meta":{"line":209,"file":"UtilsManager.js","path":"mongodb/src/managers"}}],"meta":{"line":47,"file":"UtilsManager.js","path":"mongodb/src/managers"}}],"interfaces":[],"typedefs":[{"name":"RawEconomyUser","description":"Raw economy user object from database.","type":[[["object"]]],"props":[{"name":"dailyCooldown","description":"User's daily cooldown.","type":[[["number"]]]},{"name":"workCooldown","description":"User's work cooldown.","type":[[["number"]]]},{"name":"weeklyCooldown","description":"User's weekly cooldown.","type":[[["number"]]]},{"name":"money","description":"User's balance.","type":[[["number"]]]},{"name":"bank","description":"User's bank balance.","type":[[["number"]]]},{"name":"inventory","description":"User's inventory.","type":[[["InventoryData"]]]},{"name":"history","description":"User's purchases history.","type":[[["HistoryData"]]]},{"name":"id","description":"User ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"meta":{"line":145,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"LoggerColors","type":[[["object"]]],"props":[{"name":"red","description":"Red color.","type":[[["string"]]]},{"name":"green","description":"Green color.","type":[[["string"]]]},{"name":"yellow","description":"Yellow color.","type":[[["string"]]]},{"name":"blue","description":"Blue color.","type":[[["string"]]]},{"name":"magenta","description":"Magenta color.","type":[[["string"]]]},{"name":"cyan","description":"Cyan color.","type":[[["string"]]]},{"name":"white","description":"White color.","type":[[["string"]]]},{"name":"reset","description":"Reset color.","type":[[["string"]]]},{"name":"black","description":"Black color.","type":[[["string"]]]},{"name":"lightgray","description":"Light gray color.","type":[[["string"]]]},{"name":"darkgray","description":"Dark gray color.","type":[[["string"]]]},{"name":"lightred","description":"Light red color.","type":[[["string"]]]},{"name":"lightgreen","description":"Light green color.","type":[[["string"]]]},{"name":"lightyellow","description":"Light yellow color.","type":[[["string"]]]},{"name":"lightblue","description":"Light blue color.","type":[[["string"]]]},{"name":"lightmagenta","description":"Light magenta color.","type":[[["string"]]]},{"name":"lightcyan","description":"Light cyan color.","type":[[["string"]]]}],"meta":{"line":87,"file":"Logger.js","path":"mongodb/src/classes/util"}},{"name":"EconomyOptions","description":"Default Economy configuration.","type":[[["object"]]],"props":[{"name":"dailyCooldown","description":"Cooldown for Daily Command (in ms). Default: 24 hours (60000 * 60 * 24 ms)","optional":true,"default":86400000,"type":[[["number"]]]},{"name":"workCooldown","description":"Cooldown for Work Command (in ms). Default: 1 hour (60000 * 60 ms)","optional":true,"default":3600000,"type":[[["number"]]]},{"name":"dailyAmount","description":"Amount of money for Daily Command. Default: 100.","optional":true,"default":100,"type":[[["Number"]],[["Array","<"],["Number",">"]]]},{"name":"weeklyCooldown","description":"Cooldown for Weekly Command (in ms). Default: 7 days (60000 * 60 * 24 * 7 ms)","optional":true,"default":604800000,"type":[[["number"]]]},{"name":"weeklyAmount","description":"Amount of money for Weekly Command. Default: 1000.","optional":true,"default":100,"type":[[["Number"]],[["Array","<"],["Number",">"]]]},{"name":"workAmount","description":"Amount of money for Work Command. Default: [10, 50].","optional":true,"default":"[10, 50]","type":[[["Number"]],[["Array","<"],["Number",">"]]]},{"name":"subtractOnBuy","description":"If true, when someone buys the item, their balance will subtract by item price. Default: false","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"sellingItemPercent","description":"Percent of the item's price it will be sold for. Default: 75.","optional":true,"default":75,"type":[[["number"]]]},{"name":"deprecationWarnings","description":"If true, the deprecation warnings will be sent in the console. Default: true.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"savePurchasesHistory","description":"If true, the module will save all the purchases history.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"dateLocale","description":"The region (example: 'ru'; 'en') to format the date and time. Default: 'en'.","optional":true,"default":"'en'","type":[[["string"]]]},{"name":"updater","description":"Update checker configuration.","optional":true,"default":"UpdaterOptions","type":[[["UpdaterOptions"]]]},{"name":"errorHandler","description":"Error handler configuration.","optional":true,"default":"ErrorHandlerOptions","type":[[["ErrorHandlerOptions"]]]},{"name":"optionsChecker","description":"Configuration for an 'Economy.utils.checkOptions' method.","optional":true,"default":"CheckerOptions","type":[[["CheckerOptions"]]]},{"name":"debug","description":"Enables or disables the debug mode.","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":386,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"UpdaterOptions","description":"Update checker configuration.","type":[[["object"]]],"props":[{"name":"checkUpdates","description":"Sends the update state message in console on start. Default: true.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"upToDateMessage","description":"Sends the message in console on start if module is up to date. Default: true.","optional":true,"default":true,"type":[[["boolean"]]]}],"meta":{"line":416,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"ErrorHandlerOptions","type":[[["object"]]],"props":[{"name":"handleErrors","description":"Handles all errors on startup. Default: true.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"attempts","description":"Amount of attempts to load the module. Use 0 for infinity attempts. Default: 5.","optional":true,"default":5,"type":[[["number"]]]},{"name":"time","description":"Time between every attempt to start the module (in ms). Default: 3000.","optional":true,"default":3000,"type":[[["number"]]]}],"meta":{"line":423,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"CheckerOptions","description":"Configuration for an 'Economy.utils.checkOptions' method.","type":[[["object"]]],"props":[{"name":"ignoreInvalidTypes","description":"Allows the method to ignore the options with invalid types. Default: false.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"ignoreUnspecifiedOptions","description":"Allows the method to ignore the unspecified options. Default: true.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"ignoreInvalidOptions","description":"Allows the method to ignore the unexisting options. Default: false.","optional":true,"default":false,"type":[[["boolean"]]]},{"name":"showProblems","description":"Allows the method to show all the problems in the console. Default: true.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"sendLog","description":"Allows the method to send the result in the console. \nRequires the 'showProblems' or 'sendLog' options to set. Default: true.","optional":true,"default":true,"type":[[["boolean"]]]},{"name":"sendSuccessLog","description":"Allows the method to send the result if no problems were found. Default: false.","optional":true,"default":false,"type":[[["boolean"]]]}],"meta":{"line":430,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"Manager","type":[[["object"]]],"props":[{"name":"name","description":"The manager's short name.","type":[[["string"]]]},{"name":"manager","description":"The manager class.","type":[[["function"]]]}],"meta":{"line":806,"file":"index.js","path":"mongodb/src"}},{"name":"DataIdentifier","type":[[["Object"]]],"props":[{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]}],"meta":{"line":186,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"BalanceObject","description":"Balance object.","type":[[["Object"]]],"props":[{"name":"money","description":"User's money amount.","type":[[["number"]]]},{"name":"bank","description":"User's bank balance.","type":[[["number"]]]}],"meta":{"line":45,"file":"BalanceItem.js","path":"mongodb/src/classes"}},{"name":"BankBalanceObject","description":"Bank balance object.","type":[[["Object"]]],"props":[{"name":"balance","description":"User's bank balance.","type":[[["number"]]]}],"meta":{"line":39,"file":"BankBalanceItem.js","path":"mongodb/src/classes"}},{"name":"CooldownsObject","type":[[["object"]]],"props":[{"name":"daily","description":"Cooldown for Daily Command.","type":[[["number"]]]},{"name":"work","description":"Cooldown for Work Command.","type":[[["number"]]]},{"name":"weekly","description":"Cooldown for Weekly Command.","type":[[["number"]]]}],"meta":{"line":206,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"AddItemOptions","description":"Configuration with item info for 'Economy.shop.addItem' method.","type":[[["object"]]],"props":[{"name":"name","description":"Item name.","type":[[["string"]]]},{"name":"price","description":"Item price.","type":[[["string"]],[["number"]]]},{"name":"message","description":"Item message that will be returned on use.","optional":true,"default":"'You have used this item!'","type":[[["string"]]]},{"name":"description","description":"Item description.","optional":true,"default":"'Very mysterious item.'","type":[[["string"]]]},{"name":"maxAmount","description":"Max amount of the item that user can hold in their inventory.","optional":true,"default":null,"type":[[["string"]],[["number"]]]},{"name":"role","description":"Role ID from your Discord server.","optional":true,"default":null,"type":[[["string"]]]},{"name":"custom","description":"Custom item properties object.","optional":true,"type":[[["object"]]]}],"meta":{"line":581,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"ItemData","description":"Item data object.","type":[[["object"]]],"props":[{"name":"id","description":"Item ID.","type":[[["number"]]]},{"name":"name","description":"Item name.","type":[[["string"]]]},{"name":"price","description":"Item price.","type":[[["number"]]]},{"name":"message","description":"The message that will be returned on item use.","type":[[["string"]]]},{"name":"description","description":"Item description.","type":[[["string"]]]},{"name":"role","description":"ID of Discord Role that will be given to Wuser on item use.","type":[[["string"]]]},{"name":"maxAmount","description":"Max amount of the item that user can hold in their inventory.","type":[[["number"]]]},{"name":"date","description":"Date when the item was added in the shop.","type":[[["string"]]]},{"name":"custom","description":"Custom item properties object.","type":[[["object"]]]}],"meta":{"line":506,"file":"InventoryManager.js","path":"mongodb/src/managers"}},{"name":"InventoryData","description":"Inventory data object.","type":[[["object"]]],"props":[{"name":"id","description":"Item ID in your inventory.","type":[[["number"]]]},{"name":"name","description":"Item name.","type":[[["string"]]]},{"name":"price","description":"Item price.","type":[[["number"]]]},{"name":"message","description":"The message that will be returned on item use.","type":[[["string"]]]},{"name":"role","description":"ID of Discord Role that will be given to user on item use.","type":[[["string"]]]},{"name":"maxAmount","description":"Max amount of the item that user can hold in their inventory.","type":[[["number"]]]},{"name":"date","description":"Date when the item was bought by a user.","type":[[["string"]]]},{"name":"custom","description":"Custom item properties object.","type":[[["object"]]]}],"meta":{"line":614,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"HistoryData","description":"History data object.","type":[[["object"]]],"props":[{"name":"id","description":"Item ID in history.","type":[[["number"]]]},{"name":"name","description":"Item name.","type":[[["string"]]]},{"name":"price","description":"Item price.","type":[[["number"]]]},{"name":"message","description":"The message that will be returned on item use.","type":[[["string"]]]},{"name":"role","description":"ID of Discord Role that will be given to user on item use.","type":[[["string"]]]},{"name":"date","description":"Date when the item was bought by a user.","type":[[["string"]]]},{"name":"memberID","description":"Member ID.","type":[[["string"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]}],"meta":{"line":601,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"BalanceLeaderboard","description":"Balance leaderboard object.","type":[[["object"]]],"props":[{"name":"index","description":"User's place in the leaderboard.","type":[[["number"]]]},{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"money","description":"Amount of money.","type":[[["number"]]]}],"meta":{"line":335,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"BankLeaderboard","description":"Bank leaderboard object.","type":[[["object"]]],"props":[{"name":"index","description":"User's place in the top.","type":[[["number"]]]},{"name":"userID","description":"User ID.","type":[[["string"]]]},{"name":"money","description":"Amount of money.","type":[[["number"]]]}],"meta":{"line":233,"file":"BankManager.js","path":"mongodb/src/managers"}},{"name":"SettingsTypes","description":"Settings object.","type":[[["object"]]],"props":[{"name":"dailyAmount","description":"Amount of money for Daily Command. Default: 100.","type":[[["Number"]],[["Array","<"],["Number",">"]]]},{"name":"dailyCooldown","description":"Cooldown for Daily Command (in ms). Default: 24 hours (60000 * 60 * 24 ms)","type":[[["number"]]]},{"name":"workAmount","description":"Amount of money for Work Command. Default: [10, 50].","type":[[["Number"]],[["Array","<"],["Number",">"]]]},{"name":"workCooldown","description":"Cooldown for Work Command (in ms). Default: 1 hour (60000 * 60 ms)","type":[[["number"]]]},{"name":"weeklyAmount","description":"Amount of money for Weekly Command. Default: 1000.","type":[[["Number"]],[["Array","<"],["Number",">"]]]},{"name":"weeklyCooldown","description":"Cooldown for Weekly Command (in ms). Default: 7 days (60000 * 60 * 24 * 7 ms)","type":[[["number"]]]},{"name":"dateLocale","description":"The region (example: 'ru' or 'en') to format the date and time. Default: 'en'","type":[[["string"]]]},{"name":"subtractOnBuy","description":"If true, when someone buys the item, their balance will subtract by item price. Default: false.","type":[[["boolean"]]]},{"name":"sellingItemPercent","description":"Percent of the item's price it will be sold for. Default: 75.","type":[[["number"]]]}],"meta":{"line":295,"file":"SettingsManager.js","path":"mongodb/src/managers"}},{"name":"Settings","type":[[["dailyAmount","'"]],[["dailyCooldown","'"]],[["workAmount","'"]],[["workCooldown","'"]],[["weeklyAmount","'"]],[["weeklyCooldown","'"]],[["dateLocale","'"]],[["subtractOnBuy","'"]],[["sellingItemPercent","'"]],[["savePurchasesHistory","'"]]],"meta":{"line":379,"file":"SettingsManager.js","path":"mongodb/src/managers"}},{"name":"TransferringResult","type":[[["Object"]]],"props":[{"name":"success","description":"Whether the transfer was successful or not.","type":[[["boolean"]]]},{"name":"guildID","description":"Guild ID.","type":[[["string"]]]},{"name":"amount","description":"Amount of money that was sent.","type":[[["number"]]]},{"name":"senderMemberID","description":"Sender member ID.","type":[[["string"]]]},{"name":"receiverMemberID","description":"Receiver member ID.","type":[[["string"]]]},{"name":"sendingReason","description":"Sending reason.","type":[[["string"]]]},{"name":"receivingReason","description":"Receiving reason.","type":[[["string"]]]},{"name":"senderBalance","description":"New sender balance.","type":[[["number"]]]},{"name":"receiverBalance","description":"New receiver balance.","type":[[["number"]]]}],"meta":{"line":310,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"UserTransferringOptions","description":"Transferring options.","type":[[["object"]]],"props":[{"name":"amount","description":"Amount of money to send.","type":[[["number"]]]},{"name":"senderMemberID","description":"A member ID who will send the money.","type":[[["string"]]]},{"name":"sendingReason","description":"The reason of subtracting the money from sender. (example: \"sending money to {user}\")","optional":true,"default":"'sending money to user'","type":[[["string"]]]},{"name":"receivingReason","description":"The reason of adding a money to receiver. (example: \"receiving money from {user}\")","optional":true,"default":"'receiving money from user'","type":[[["string"]]]}],"meta":{"line":145,"file":"Balance.js","path":"mongodb/src/classes/user"}},{"name":"RewardCooldowns","type":[[["object"]]],"props":[{"name":"daily","description":"Daily cooldown.","type":[[["number"]]]},{"name":"work","description":"Work cooldown.","type":[[["number"]]]},{"name":"weekly","description":"Weekly cooldown.","type":[[["number"]]]}],"meta":{"line":138,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"TimeData","type":[[["object"]]],"props":[{"name":"days","description":"Amount of days until the cooldown ends.","type":[[["number"]]]},{"name":"hours","description":"Amount of hours until the cooldown ends.","type":[[["number"]]]},{"name":"minutes","description":"Amount of minutes until the cooldown ends.","type":[[["number"]]]},{"name":"seconds","description":"Amount of seconds until the cooldown ends.","type":[[["number"]]]},{"name":"milliseconds","description":"Amount of milliseconds until the cooldown ends.","type":[[["number"]]]}],"meta":{"line":348,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"CooldownData","type":[[["object"]]],"props":[{"name":"time","description":"A time object with the remaining time until the cooldown ends.","type":[[["TimeData"]]]},{"name":"pretty","description":"A formatted string with the remaining time until the cooldown ends.","type":[[["string"]]]}],"meta":{"line":357,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"CooldownsTimeObject","type":[[["object"]]],"props":[{"name":"daily","description":"Cooldown for Daily Command.","type":[[["CooldownData"]]]},{"name":"work","description":"Cooldown for Work Command.","type":[[["CooldownData"]]]},{"name":"weekly","description":"Cooldown for Weekly Command.","type":[[["CooldownData"]]]}],"meta":{"line":213,"file":"Cooldowns.js","path":"mongodb/src/classes/user"}},{"name":"ShopOperationInfo","type":[[["object"]]],"props":[{"name":"status","description":"Operation status.","type":[[["boolean"]]]},{"name":"message","description":"Operation message.","type":[[["string"]]]},{"name":"item","description":"Item object.","type":[[["ShopItem"]],[["InventoryItem"]]]},{"name":"quantity","description":"Item quantity.","type":[[["number"]]]},{"name":"totalPrice","description":"Total price of the items.","type":[[["number"]]]}],"meta":{"line":592,"file":"ShopManager.js","path":"mongodb/src/managers"}},{"name":"RewardData","type":[[["object"]]],"props":[{"name":"type","description":"Type of the operation.","type":[[["daily","'"]],[["work","'"]],[["weekly","'"]]]},{"name":"status","description":"The status of operation.","type":[[["boolean"]]]},{"name":"cooldown","description":"Cooldown object.","type":[[["CooldownData"]]]},{"name":"reward","description":"Amount of money that the user received.","type":[[["number"]]]},{"name":"defaultReward","description":"Reward that was specified in a module configuration.","type":[[["number"]]]}],"meta":{"line":339,"file":"RewardManager.js","path":"mongodb/src/managers"}},{"name":"EconomyEvents","type":[[["balanceSet","'"]],[["balanceAdd","'"]],[["balanceSubtract","'"]],[["bankSet","'"]],[["bankAdd","'"]],[["bankSubtract","'"]],[["shopItemAdd","'"]],[["shopItemEdit","'"]],[["shopItemBuy","'"]],[["shopItemUse","'"]],[["shopClear","'"]],[["ready","'"]],[["destroy","'"]]],"meta":{"line":60,"file":"Emitter.js","path":"mongodb/src/classes/util"}},{"name":"LoggerOptions","type":[[["object"]]],"props":[{"name":"debug","description":"Is the debug mode enabled.","type":[[["boolean"]]]}],"meta":{"line":82,"file":"Logger.js","path":"mongodb/src/classes/util"}},{"name":"TransferringOptions","description":"Transferring options.","type":[[["object"]]],"props":[{"name":"amount","description":"Amount of money to send.","type":[[["number"]]]},{"name":"senderMemberID","description":"A member ID who will send the money.","type":[[["string"]]]},{"name":"receiverMemberID","description":"A member ID who will receive the money.","type":[[["string"]]]},{"name":"sendingReason","description":"The reason of subtracting the money from sender. (example: \"sending money to {user}\")","optional":true,"default":"'sending money to user'","type":[[["string"]]]},{"name":"receivingReason","description":"The reason of adding a money to receiver. (example: \"receiving money from {user}\")","optional":true,"default":"'receiving money from user'","type":[[["string"]]]}],"meta":{"line":323,"file":"BalanceManager.js","path":"mongodb/src/managers"}},{"name":"PredicateFunction","type":[[["function"]]],"params":[{"name":"value","type":[[["any"]]]},{"name":"index","type":[[["number"]]]},{"name":"array","type":[[["Array","<"],["any",">"]]]}],"returns":[[["boolean"]]],"meta":{"line":605,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"CompareFunction","type":[[["function"]]],"params":[{"name":"a","type":[[["any"]]]},{"name":"b","type":[[["any"]]]}],"returns":[[["number"]]],"meta":{"line":613,"file":"BaseManager.js","path":"mongodb/src/managers"}},{"name":"CacheItemName","type":[[["guilds","'"]],[["users","'"]],[["cooldowns","'"]],[["balance","'"]],[["shop","'"]],[["inventory","'"]],[["history","'"]]],"meta":{"line":192,"file":"CacheManager.js","path":"mongodb/src/managers"}},{"name":"VersionData","description":"Module update state.","type":[[["object"]]],"props":[{"name":"updated","description":"Is the module updated.","type":[[["boolean"]]]},{"name":"installedVersion","description":"Installed version.","type":[[["string"]]]},{"name":"packageVersion","description":"Avaible version.","type":[[["string"]]]}],"meta":{"line":378,"file":"UtilsManager.js","path":"mongodb/src/managers"}},{"name":"ProperyDeprecationOptions","type":[[["object"]]],"props":[{"name":"method","description":"The method that includes an options object with deprecated property.","type":[[["string"]]]},{"name":"argumentName","description":"The name of the argument where the options object has a deprecated property.","type":[[["string"]]]},{"name":"argumentsList","description":"The list of arguments of the method.","type":[[["Array","<"],["string",">"]]]},{"name":"example","description":"Example of the usage of the new property.","type":[[["string"]]]}],"meta":{"line":181,"file":"errors.js","path":"mongodb/src/structures"}}],"externals":[]}